{"version":3,"sources":["components/Spinner/Spinner.tsx","storage/Tokens.ts","storage/Storage.ts","components/Nav/Nav.tsx","helpers.ts","pages/Login/Login.tsx","pages/Callback/Callback.tsx","hooks.ts","bungie-api/destiny2-api.ts","storage/Membership.ts","storage/IndexedDB.ts","pages/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spinner","Locals","props","text","noOverlay","className","rest","classes","classNames","viewBox","transform","r","Storage","getStorage","window","localStorage","storage","this","key","getItem","value","setItem","removeItem","keys","forEach","clearItem","TokenStorage","token","set","ALL_TOKENS","JSON","stringify","allTokens","get","parse","clearItems","instance","Nav","isAuthorized","getInstance","getAllTokens","to","API_KEY","process","CLIENT_ID","CLIENT_SECRET","REDIRECT_URI","bungieApiRoot","getActiveToken","a","clear","hasTokenExpired","accessToken","refreshToken","console","log","getAccessTokenFromRefreshToken","Error","$httpAuthenticated","config","error","headers","authorization","url","params","URLSearchParams","toString","body","fetch","method","then","response","json","$http","res","getAccessTokenFromCode","code","grant_type","client_id","client_secret","handleAccessToken","tokens","setAllTokens","access_token","data","inception","Date","now","expires","expires_in","name","bungieMembershipId","membership_id","refresh_token","refresh_expires_in","Promise","resolve","ok","reject","Login","history","useHistory","onSuccess","push","authorizationUrl","responseType","clientId","redirectUri","onFailure","buttonText","Callback","authCode","useLocation","search","getMembershipInfo","membershipId","getLinkedProfiles","membershipType","getAllMemberships","Response","linkedProfiles","destinyMembershipId","profiles","getProfile","components","profile","characters","getCharactersIds","membershipInfo","hunterId","hunter","titanId","titan","warlockId","warlock","profileCharacters","Object","id","classType","getManifest","getDestinyManifest","getDestinyInventoryItemManifest","manifest","getDestinyManifestSlice","destinyManifest","language","tableNames","manifestSlice","dbp","openDB","upgrade","db","createObjectStore","val","put","storeManifest","DestinyInventoryItemDefinition","DestinyStatDefinition","getDestinyStatDefinitionFromStore","getDestinyInventoryItemDefinitionFromStore","MembershipInfoStorage","MEMBERSHIP_INFO","Home","useState","loading","setLoading","tokenStorage","membershipInfoStorage","info","d2StatDef","d2invItemDef","inventoryItemManifest","setMembershipInfo","useEffect","getData","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff621af3.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { ReactElement } from 'react';\nimport './spinner.scss';\n\nexport interface SpinnerDisplayProps {\n  text?: string;\n  noOverlay?: boolean;\n  className?: string | string[];\n}\n\nfunction Spinner(props: SpinnerDisplayProps): ReactElement {\n  const { text, noOverlay, className, ...rest } = props;\n\n  const classes = classNames('Spinner', noOverlay && 'Spinner--noOverlay', className);\n\n  return (\n    <div {...rest} className={classes}>\n      <div className=\"Spinner-spinner\">\n        <svg viewBox=\"0 0 64 64\">\n          <circle transform=\"translate(32,32)\" r=\"26\" />\n        </svg>\n      </div>\n      {text ? <div className=\"Spinner-content\">{text}</div> : null}\n    </div>\n  );\n}\n\nexport default Spinner;\n","import Storage from './Storage';\n\nenum Locals {\n  ALL_TOKENS = 'all_tokens',\n}\n\nexport interface AccessTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token: string;\n  refresh_expires_in: number;\n  membership_id: string;\n}\n\nexport interface Tokens {\n  accessToken: Token;\n  refreshToken?: Token;\n  bungieMembershipId: string;\n}\n\nexport interface Token {\n  /** The oauth token key */\n  value: string;\n  /** The token expires this many seconds after it is acquired. */\n  expires: number;\n  name: 'access' | 'refresh';\n  /** A UTC epoch milliseconds timestamp representing when the token was acquired. */\n  inception: number;\n}\n\nexport default class TokenStorage extends Storage<Locals> {\n  private static instance?: TokenStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): TokenStorage {\n    if (!this.instance) {\n      this.instance = new TokenStorage();\n    }\n\n    return this.instance;\n  }\n  public setAllTokens(token: Tokens): void {\n    this.set(Locals.ALL_TOKENS, JSON.stringify(token));\n  }\n\n  public getAllTokens(): Tokens | null {\n    const allTokens = this.get(Locals.ALL_TOKENS);\n\n    return allTokens ? JSON.parse(allTokens) : null;\n  }\n\n  public clear(): void {\n    this.clearItems([Locals.ALL_TOKENS]);\n  }\n}\n","interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n  removeItem(key: string): void;\n}\n\nexport default abstract class Storage<T extends string> {\n  private readonly storage: IStorage;\n\n  public constructor(getStorage = (): IStorage => window.localStorage) {\n    this.storage = getStorage();\n  }\n\n  protected get(key: T): string | null {\n    return this.storage.getItem(key);\n  }\n\n  protected set(key: T, value: string): void {\n    this.storage.setItem(key, value);\n  }\n\n  protected clearItem(key: T): void {\n    this.storage.removeItem(key);\n  }\n\n  protected clearItems(keys: T[]): void {\n    keys.forEach((key) => {\n      return this.clearItem(key);\n    });\n  }\n}\n","import { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\nimport TokenStorage from '../../storage/Tokens';\nimport './nav.scss';\n\nfunction Nav(): ReactElement {\n  const isAuthorized = TokenStorage.getInstance().getAllTokens();\n  return (\n    <div className=\"navbar\">\n      <Link to=\"/\">Home</Link>\n      {!isAuthorized && <Link to=\"/login\">Login</Link>}\n      {isAuthorized && <Link to=\"/vendors\">Vendors</Link>}\n    </div>\n  );\n}\n\nexport default Nav;\n","import { HttpClientConfig } from 'bungie-api-ts/http';\nimport TokenStorage, { Token, Tokens } from './storage/Tokens';\n\nexport const API_KEY = process.env.REACT_APP_BUNGIE_API_KEY || '';\nexport const CLIENT_ID = process.env.REACT_APP_BUNGIE_CLIENT_ID || '';\nexport const CLIENT_SECRET = process.env.REACT_APP_BUNGIE_CLIENT_SECRET || '';\nexport const REDIRECT_URI = process.env.REACT_APP_BUNGIE_REDIRECT_URI || '';\n\nexport const bungieApiRoot = 'https://www.bungie.net/Platform';\n\nexport async function getActiveToken(): Promise<Tokens> {\n  const allTokens = TokenStorage.getInstance().getAllTokens();\n\n  if (!allTokens) {\n    TokenStorage.getInstance().clear();\n  }\n\n  const accessTokenIsValid = allTokens && !hasTokenExpired(allTokens.accessToken);\n  if (accessTokenIsValid) return allTokens;\n\n  const refreshTokenIsValid = allTokens && !hasTokenExpired(allTokens.refreshToken);\n  if (!refreshTokenIsValid) {\n    console.log('We need to fetch a new token here');\n  }\n\n  try {\n    if (allTokens) return await getAccessTokenFromRefreshToken(allTokens.refreshToken!);\n    throw new Error();\n  } catch (e) {\n    throw new Error('I dunno');\n  }\n}\n\nexport async function $httpAuthenticated(config: HttpClientConfig): Promise<Response> {\n  const token = await getActiveToken();\n\n  if (!token) {\n    console.error('We need a new token');\n    throw new Error('Some token error');\n  }\n  const headers = {\n    authorization: `Bearer ${token.accessToken.value}`,\n    'x-api-key': API_KEY,\n  };\n\n  let url = config.url;\n  if (config.params) {\n    // strip out undefined params keys. bungie-api-ts creates them for optional endpoint parameters\n    for (const key in config.params) {\n      typeof config.params[key] === 'undefined' && delete config.params[key];\n    }\n    url = `${url}?${new URLSearchParams(config.params as Record<string, string>).toString()}`;\n  }\n  console.log('Creating http client', { token });\n  console.log('Fetching from', config.url, 'with headers', headers, 'body', config.body, 'params', config.params);\n\n  return fetch(url, {\n    method: config.method,\n    body: config.body,\n    headers,\n  }).then((response) => response.json());\n}\n\nexport async function $http(config: HttpClientConfig): Promise<Response> {\n  return fetch(config.url, {\n    method: config.method,\n    body: config.body,\n  }).then((res) => res.json());\n}\n\nexport function getAccessTokenFromCode(code: string): Promise<void> {\n  const body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code,\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n  });\n  return fetch(`${bungieApiRoot}/app/oauth/token/`, { method: 'POST', body })\n    .then((res) => res.json())\n    .then(handleAccessToken)\n    .then((tokens) => TokenStorage.getInstance().setAllTokens(tokens));\n}\n\nfunction handleAccessToken(\n  response:\n    | {\n        access_token: string;\n        expires_in: number;\n        membership_id: string;\n        refresh_token?: string;\n        refresh_expires_in: number;\n      }\n    | undefined,\n): Tokens {\n  if (response?.access_token) {\n    const data = response;\n    const inception = Date.now();\n    const accessToken: Token = {\n      value: data.access_token,\n      expires: data.expires_in,\n      name: 'access',\n      inception,\n    };\n\n    const tokens: Tokens = {\n      accessToken,\n      bungieMembershipId: data.membership_id,\n    };\n\n    if (data.refresh_token) {\n      tokens.refreshToken = {\n        value: data.refresh_token,\n        expires: data.refresh_expires_in,\n        name: 'refresh',\n        inception,\n      };\n    }\n\n    return tokens;\n  } else {\n    throw new Error('No tokens');\n  }\n}\n\nexport function getAccessTokenFromRefreshToken(refreshToken: Token): Promise<Tokens> {\n  const body = new URLSearchParams({\n    grant_type: 'refresh_token',\n    refresh_token: refreshToken.value,\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n  });\n\n  return Promise.resolve(\n    fetch(`${bungieApiRoot}/app/oauth/token/`, {\n      method: 'POST',\n      body,\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    })\n      .then((response) => (response.ok ? response.json() : Promise.reject(response)))\n      .then(handleAccessToken)\n      .then((token) => {\n        TokenStorage.getInstance().setAllTokens(token);\n        return token;\n      }),\n  );\n}\nfunction hasTokenExpired(token?: Token): boolean {\n  if (!token) return true;\n\n  const expires = token.expires * 1000 + token.inception;\n  const now = Date.now();\n\n  return now > expires;\n}\n","import { ReactElement } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport OAuth2Login from 'react-simple-oauth2-login';\nimport { CLIENT_ID, getAccessTokenFromCode, REDIRECT_URI } from '../../helpers';\nimport './login.scss';\n\nfunction Login(): ReactElement {\n  const history = useHistory();\n  console.log('Using redirect', REDIRECT_URI);\n\n  const onSuccess = async (response: any) => {\n    const code = response.code;\n    console.log({ code });\n    await getAccessTokenFromCode(code);\n    history.push('/');\n  };\n\n  const onFailure = (response: Response) => console.log(response);\n\n  return (\n    <OAuth2Login\n      authorizationUrl=\"https://www.bungie.net/en/Oauth/Authorize\"\n      responseType=\"code\"\n      clientId={CLIENT_ID}\n      redirectUri={REDIRECT_URI}\n      onSuccess={onSuccess}\n      onFailure={onFailure}\n      buttonText=\"Login with Bungie.net Now\"\n      className=\"loginButton\"\n    />\n  );\n}\n\nexport default Login;\n","import { ReactElement } from 'react';\nimport { useQuery } from '../../hooks';\n\nfunction Callback(): ReactElement {\n  const query = useQuery();\n\n  const authCode = query.get('code');\n\n  return <>{!authCode && <>{authCode}</>}</>;\n}\n\nexport default Callback;\n","import { useLocation } from 'react-router-dom';\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import {\n  DestinyManifest,\n  DestinyManifestSlice,\n  DestinyProfileResponse,\n  getDestinyManifest,\n  getDestinyManifestSlice,\n  getLinkedProfiles,\n  getProfile,\n} from 'bungie-api-ts/destiny2';\nimport { $http, $httpAuthenticated } from '../helpers';\nimport { MembershipInfo } from '../storage/Membership';\n\nexport async function getMembershipInfo(membershipId: string): Promise<MembershipInfo> {\n  console.log('Fetching membership info', membershipId);\n  const linkedProfiles = await getLinkedProfiles($httpAuthenticated, {\n    membershipId,\n    membershipType: 254,\n    getAllMemberships: true,\n  }).then((response) => response.Response);\n  const destinyMembershipId = linkedProfiles.profiles[0].membershipId;\n  const membershipType = linkedProfiles.profiles[0].membershipType;\n\n  const profile = await getProfile($httpAuthenticated, {\n    destinyMembershipId,\n    components: [200],\n    membershipType,\n  }).then((response) => response.Response);\n\n  const characters = getCharactersIds(profile);\n  const membershipInfo: MembershipInfo = {\n    bungieMembershipId: membershipId,\n    destinyMembershipId,\n    membershipType,\n    hunterId: characters.hunter,\n    titanId: characters.titan,\n    warlockId: characters.warlock,\n  };\n\n  return membershipInfo;\n}\n\nexport interface Characters {\n  hunter: string | null;\n  titan: string | null;\n  warlock: string | null;\n}\n\nfunction getCharactersIds(profile: DestinyProfileResponse): Characters {\n  let hunterId: string | null = null,\n    titanId: string | null = null,\n    warlockId: string | null = null;\n  if (profile.characters.data) {\n    const profileCharacters = profile.characters.data;\n    Object.keys(profile.characters.data).forEach((id) => {\n      switch (profileCharacters[id].classType) {\n        case 0:\n          titanId = id;\n          break;\n        case 1:\n          hunterId = id;\n          break;\n        case 2:\n          warlockId = id;\n          break;\n        default:\n          throw new Error('Unknown class type');\n      }\n    });\n  }\n\n  return {\n    hunter: hunterId,\n    titan: titanId,\n    warlock: warlockId,\n  };\n}\n\nexport async function getManifest(): Promise<DestinyManifest> {\n  const response = await getDestinyManifest($http);\n  return response.Response;\n}\n\nexport async function getDestinyInventoryItemManifest(): Promise<\n  DestinyManifestSlice<['DestinyInventoryItemDefinition', 'DestinyStatDefinition']>\n> {\n  const manifest = await getManifest();\n  const manifestSlice = await getDestinyManifestSlice($http, {\n    destinyManifest: manifest,\n    language: 'en',\n    tableNames: ['DestinyInventoryItemDefinition', 'DestinyStatDefinition'],\n  });\n  console.log({ manifestSlice });\n  return manifestSlice;\n}\n","import Storage from './Storage';\n\nenum Locals {\n  MEMBERSHIP_INFO = 'membership_info',\n}\n\nexport interface MembershipInfo {\n  bungieMembershipId: string;\n  hunterId: string | null;\n  titanId: string | null;\n  warlockId: string | null;\n  destinyMembershipId: string;\n  membershipType: number;\n}\n\nexport default class MembershipInfoStorage extends Storage<Locals> {\n  private static instance?: MembershipInfoStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): MembershipInfoStorage {\n    if (!this.instance) {\n      this.instance = new MembershipInfoStorage();\n    }\n    return this.instance;\n  }\n\n  public getMembershipInfo(): MembershipInfo | undefined {\n    const membershipInfo = this.get(Locals.MEMBERSHIP_INFO);\n    if (membershipInfo) return JSON.parse(membershipInfo);\n\n    return undefined;\n  }\n\n  public setMembershipInfo(membershipInfo: string): void {\n    this.set(Locals.MEMBERSHIP_INFO, membershipInfo);\n  }\n}\n","import { DestinyInventoryItemDefinition, DestinyManifestSlice, DestinyStatDefinition } from 'bungie-api-ts/destiny2';\nimport { openDB } from 'idb';\n\nconst dbp = openDB('destiny2-store', 1, {\n  upgrade(db) {\n    db.createObjectStore('d2');\n  },\n});\n\nasync function get<Type>(key: string): Promise<Type> {\n  return (await dbp).get('d2', key);\n}\n\nasync function set(key: string, val: any) {\n  return (await dbp).put('d2', val, key);\n}\n\n// async function del(key: string) {\n//   return (await dbp).delete('d2', key);\n// }\n// async function clear() {\n//   return (await dbp).clear('d2');\n// }\n// async function keys() {\n//   return (await dbp).getAllKeys('d2');\n// }\n\nexport async function storeManifest(\n  manifest: DestinyManifestSlice<['DestinyInventoryItemDefinition', 'DestinyStatDefinition']>,\n): Promise<void> {\n  await set('DestinyInventoryItemDefinition', manifest.DestinyInventoryItemDefinition);\n  await set('DestinyStatDefinition', manifest.DestinyStatDefinition);\n}\n\nexport async function getDestinyStatDefinitionFromStore(): Promise<DestinyStatDefinition> {\n  return await get('DestinyStatDefinition');\n}\n\nexport async function getDestinyInventoryItemDefinitionFromStore(): Promise<DestinyInventoryItemDefinition> {\n  return await get('DestinyInventoryItemDefinition');\n}\n","import { DestinyStatDefinition } from 'bungie-api-ts/destiny2';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { getDestinyInventoryItemManifest, getMembershipInfo } from '../../bungie-api/destiny2-api';\nimport {\n  getDestinyInventoryItemDefinitionFromStore,\n  getDestinyStatDefinitionFromStore,\n  storeManifest,\n} from '../../storage/IndexedDB';\nimport MembershipInfoStorage from '../../storage/Membership';\nimport TokenStorage from '../../storage/Tokens';\n\nfunction Home(): ReactElement {\n  const history = useHistory();\n  const [loading, setLoading] = useState(true);\n\n  const tokenStorage = TokenStorage.getInstance();\n  const membershipInfoStorage = MembershipInfoStorage.getInstance();\n\n  const tokens = tokenStorage.getAllTokens();\n  let membershipId = '';\n\n  if (!tokens) {\n    console.info('Redirecting to Login');\n    history.push('/Login');\n    return <></>;\n  }\n  if (tokens) membershipId = tokens?.bungieMembershipId;\n\n  let membershipInfo = membershipInfoStorage.getMembershipInfo();\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function getData() {\n    let d2StatDef = await getDestinyStatDefinitionFromStore();\n    let d2invItemDef = await getDestinyInventoryItemDefinitionFromStore();\n    if (!d2StatDef || !d2invItemDef) {\n      const inventoryItemManifest = await getDestinyInventoryItemManifest();\n      await storeManifest(inventoryItemManifest);\n      d2StatDef = await getDestinyStatDefinitionFromStore();\n      d2invItemDef = await getDestinyInventoryItemDefinitionFromStore();\n    }\n    if (!membershipInfo) {\n      membershipInfo = await getMembershipInfo(membershipId);\n      membershipInfoStorage.setMembershipInfo(JSON.stringify(membershipInfo));\n    }\n\n    setLoading(false);\n  }\n\n  if (loading) {\n    return <>Loading User Info</>;\n  }\n\n  return <>This is the home page</>;\n}\n\nexport default Home;\n","import './app.scss';\nimport Spinner from './components/Spinner/Spinner';\nimport { ReactElement, useState } from 'react';\nimport Nav from './components/Nav/Nav';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from './pages/Login/Login';\nimport Callback from './pages/Callback/Callback';\nimport Home from './pages/Home/Home';\n\nfunction App(): ReactElement {\n  const [loading, _] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route exact={true} path=\"/login\" component={Login} />\n        <Route exact={true} path=\"/callback\" component={Callback} />\n        <Route exact={true} path=\"/\" component={Home} />\n        <Redirect to=\"/\" />\n      </Switch>\n      {loading && <Spinner text=\"Loading Destiny manifest\" noOverlay={false} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}