{"version":3,"sources":["components/Spinner/Spinner.tsx","storage/Tokens.ts","storage/Storage.ts","components/Nav/Nav.tsx","helpers.ts","pages/Login/Login.tsx","pages/Callback/Callback.tsx","hooks.ts","bungie-api/destiny2-api.ts","storage/Membership.ts","storage/IndexedDB.ts","pages/Home/Home.tsx","hashes.ts","scoring/items.ts","pages/Vendors/Vendors.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spinner","Locals","props","text","noOverlay","className","rest","classes","classNames","viewBox","transform","r","Storage","getStorage","window","localStorage","storage","this","key","getItem","value","setItem","removeItem","keys","forEach","clearItem","TokenStorage","token","set","ALL_TOKENS","JSON","stringify","allTokens","get","parse","clearItems","instance","Nav","isAuthorized","getInstance","getAllTokens","to","API_KEY","process","CLIENT_ID","CLIENT_SECRET","REDIRECT_URI","bungieApiRoot","getActiveToken","a","clear","hasTokenExpired","accessToken","refreshToken","console","log","getAccessTokenFromRefreshToken","Error","$httpAuthenticated","config","error","headers","authorization","url","params","URLSearchParams","toString","body","fetch","method","then","response","json","$http","res","getAccessTokenFromCode","code","grant_type","client_id","client_secret","handleAccessToken","tokens","setAllTokens","access_token","data","inception","Date","now","expires","expires_in","name","bungieMembershipId","membership_id","refresh_token","refresh_expires_in","Promise","resolve","ok","reject","Login","history","useHistory","onSuccess","push","authorizationUrl","responseType","clientId","redirectUri","onFailure","buttonText","Callback","authCode","useLocation","search","getMembershipInfo","membershipId","getLinkedProfiles","membershipType","getAllMemberships","Response","linkedProfiles","destinyMembershipId","profiles","getProfile","components","profile","characters","getCharactersIds","membershipInfo","hunterId","hunter","titanId","titan","warlockId","warlock","profileCharacters","Object","id","classType","getManifest","getDestinyManifest","getDestinyInventoryItemManifest","manifest","getDestinyManifestSlice","destinyManifest","language","tableNames","manifestSlice","mapCharacterIds","getVendorsForAllCharacters","characterIds","time","timeLog","fullResponse","all","map","getVendors","timeEnd","characterId","getVendorsTs","openDB","upgrade","db","createObjectStore","dbp","val","put","storeManifest","DestinyInventoryItemDefinition","DestinyStatDefinition","getDestinyStatDefinitionFromStore","getDestinyInventoryItemDefinitionFromStore","MembershipInfoStorage","MEMBERSHIP_INFO","Home","useState","loading","setLoading","tokenStorage","membershipInfoStorage","info","d2StatDef","d2invItemDef","inventoryItemManifest","setMembershipInfo","useEffect","getData","classTypeMap","vendorHashes","statHashes","armorTypes","getScorableItems","allVendors","classToArmor","classTypes","x","parseInt","d2inventoryItems","vendorIds","vendorId","getArmor","ArmorStats","init","Mobility","Resilience","Recovery","Discipline","Intellect","Strength","assign","ArmorScoring","sort","b","vendors","vendorHash","armor","sales","saleItemsKeys","saleItems","saleItemKey","itemHash","itemSubType","summaryItemHash","isScorable","saleKey","armorType","includes","getArmorScores","scorableItems","itemComponents","stats","getStats","scores","getScores","rawScore","normalizedScore","armorStats","statHash","statHashesMap","score","theoreticalMax","scoring","getScoring","getRawScore","armorScoring","maxStatPossible","minStatPossible","sortedSubGroup1","getSortedSubGroup1","sortedSubGroup2","getSortedSubGroup2","getTheoreticalMax","Math","round","Vendors","currentStatus","setCurrentStatus","armorScores","setArmorScores","getScorableArmor","scorableArmor","fetchVendorInventory","classKey","vendorKey","scope","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uWA2BeA,ICzBVC,EDyBUD,EAjBf,SAAiBE,GACf,IAAQC,EAAwCD,EAAxCC,KAAMC,EAAkCF,EAAlCE,UAAWC,EAAuBH,EAAvBG,UAAcC,EAAvC,YAAgDJ,EAAhD,GAEMK,EAAUC,IAAW,UAAWJ,GAAa,qBAAsBC,GAEzE,OACE,gDAASC,GAAT,IAAeD,UAAWE,EAA1B,UACE,qBAAKF,UAAU,kBAAf,SACE,qBAAKI,QAAQ,YAAb,SACE,wBAAQC,UAAU,mBAAmBC,EAAE,WAG1CR,EAAO,qBAAKE,UAAU,kBAAf,SAAkCF,IAAc,U,8CEhBhCS,E,WAG5B,aAAsE,IAAnDC,EAAkD,uDAArC,kBAAgBC,OAAOC,cAAc,yBAFpDC,aAEoD,EACnEC,KAAKD,QAAUH,I,uCAGjB,SAAcK,GACZ,OAAOD,KAAKD,QAAQG,QAAQD,K,iBAG9B,SAAcA,EAAQE,GACpBH,KAAKD,QAAQK,QAAQH,EAAKE,K,uBAG5B,SAAoBF,GAClBD,KAAKD,QAAQM,WAAWJ,K,wBAG1B,SAAqBK,GAAkB,IAAD,OACpCA,EAAKC,SAAQ,SAACN,GACZ,OAAO,EAAKO,UAAUP,U,eDzBvBjB,K,yBAAAA,M,SA6BgByB,E,kDAGnB,aAAuB,wC,gDAWvB,SAAoBC,GAClBV,KAAKW,IAAI3B,EAAO4B,WAAYC,KAAKC,UAAUJ,M,0BAG7C,WACE,IAAMK,EAAYf,KAAKgB,IAAIhC,EAAO4B,YAElC,OAAOG,EAAYF,KAAKI,MAAMF,GAAa,O,mBAG7C,WACEf,KAAKkB,WAAW,CAAClC,EAAO4B,gB,0BAlB1B,WAKE,OAJKZ,KAAKmB,WACRnB,KAAKmB,SAAW,IAAIV,GAGfT,KAAKmB,a,GAZ0BxB,GAArBc,EACJU,c,QEhBFC,MAXf,WACE,IAAMC,EAAeZ,EAAaa,cAAcC,eAChD,OACE,sBAAKnC,UAAU,SAAf,UACE,cAAC,IAAD,CAAMoC,GAAG,IAAT,mBACEH,GAAgB,cAAC,IAAD,CAAMG,GAAG,SAAT,mBACjBH,GAAgB,cAAC,IAAD,CAAMG,GAAG,WAAT,yB,+CCRVC,EAAUC,mCACVC,EAAYD,QACZE,EAAgBF,8CAChBG,EAAeH,yDAEfI,EAAgB,kCAEtB,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,0DACCjB,EAAYN,EAAaa,cAAcC,iBAG3Cd,EAAaa,cAAcW,UAGFlB,IAAcmB,EAAgBnB,EAAUoB,cAP9D,yCAQ0BpB,GAR1B,UAUuBA,IAAcmB,EAAgBnB,EAAUqB,eAElEC,QAAQC,IAAI,qCAZT,UAgBCvB,EAhBD,kCAgByBwB,EAA+BxB,EAAUqB,cAhBlE,uDAiBG,IAAII,MAjBP,wCAmBG,IAAIA,MAAM,WAnBb,2D,sBAuBA,SAAeC,EAAtB,kC,4CAAO,WAAkCC,GAAlC,qBAAAV,EAAA,sEACeD,IADf,UACCrB,EADD,6BAIH2B,QAAQM,MAAM,uBACR,IAAIH,MAAM,oBALb,OAaL,GANMI,EAAU,CACdC,cAAc,UAAD,OAAYnC,EAAMyB,YAAYhC,OAC3C,YAAasB,GAGXqB,EAAMJ,EAAOI,IACbJ,EAAOK,OAAQ,CAEjB,IAAW9C,KAAOyC,EAAOK,OACO,qBAAvBL,EAAOK,OAAO9C,WAA+ByC,EAAOK,OAAO9C,GAEpE6C,EAAG,UAAMA,EAAN,YAAa,IAAIE,gBAAgBN,EAAOK,QAAkCE,YAlB1E,OAoBLZ,QAAQC,IAAI,uBAAwB,CAAE5B,UACtC2B,QAAQC,IAAI,gBAAiBI,EAAOI,IAAK,eAAgBF,EAAS,OAAQF,EAAOQ,KAAM,SAAUR,EAAOK,QArBnG,kBAuBEI,MAAML,EAAK,CAChBM,OAAQV,EAAOU,OACfF,KAAMR,EAAOQ,KACbN,YACCS,MAAK,SAACC,GAAD,OAAcA,EAASC,WA3B1B,6C,sBA8BA,SAAeC,EAAtB,kC,4CAAO,WAAqBd,GAArB,SAAAV,EAAA,+EACEmB,MAAMT,EAAOI,IAAK,CACvBM,OAAQV,EAAOU,OACfF,KAAMR,EAAOQ,OACZG,MAAK,SAACI,GAAD,OAASA,EAAIF,WAJhB,4C,sBAOA,SAASG,EAAuBC,GACrC,IAAMT,EAAO,IAAIF,gBAAgB,CAC/BY,WAAY,qBACZD,OACAE,UAAWlC,EACXmC,cAAelC,IAEjB,OAAOuB,MAAM,GAAD,OAAIrB,EAAJ,qBAAsC,CAAEsB,OAAQ,OAAQF,SACjEG,MAAK,SAACI,GAAD,OAASA,EAAIF,UAClBF,KAAKU,GACLV,MAAK,SAACW,GAAD,OAAYvD,EAAaa,cAAc2C,aAAaD,MAG9D,SAASD,EACPT,GAUA,UAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUY,aAAc,CAC1B,IAAMC,EAAOb,EACPc,EAAYC,KAAKC,MAQjBN,EAAiB,CACrB7B,YARyB,CACzBhC,MAAOgE,EAAKD,aACZK,QAASJ,EAAKK,WACdC,KAAM,SACNL,aAKAM,mBAAoBP,EAAKQ,eAY3B,OATIR,EAAKS,gBACPZ,EAAO5B,aAAe,CACpBjC,MAAOgE,EAAKS,cACZL,QAASJ,EAAKU,mBACdJ,KAAM,UACNL,cAIGJ,EAEP,MAAM,IAAIxB,MAAM,aAIb,SAASD,EAA+BH,GAC7C,IAAMc,EAAO,IAAIF,gBAAgB,CAC/BY,WAAY,gBACZgB,cAAexC,EAAajC,MAC5B0D,UAAWlC,EACXmC,cAAelC,IAGjB,OAAOkD,QAAQC,QACb5B,MAAM,GAAD,OAAIrB,EAAJ,qBAAsC,CACzCsB,OAAQ,OACRF,OACAN,QAAS,CAAE,eAAgB,uCAE1BS,MAAK,SAACC,GAAD,OAAeA,EAAS0B,GAAK1B,EAASC,OAASuB,QAAQG,OAAO3B,MACnED,KAAKU,GACLV,MAAK,SAAC3C,GAEL,OADAD,EAAaa,cAAc2C,aAAavD,GACjCA,MAKf,SAASwB,EAAgBxB,GACvB,IAAKA,EAAO,OAAO,EAEnB,IAAM6D,EAA0B,IAAhB7D,EAAM6D,QAAiB7D,EAAM0D,UAG7C,OAFYC,KAAKC,MAEJC,E,MCxHAW,MA3Bf,WACE,IAAMC,EAAUC,cAChB/C,QAAQC,IAAI,iBAAkBT,GAE9B,IAAMwD,EAAS,uCAAG,WAAO/B,GAAP,eAAAtB,EAAA,6DACV2B,EAAOL,EAASK,KACtBtB,QAAQC,IAAI,CAAEqB,SAFE,SAGVD,EAAuBC,GAHb,OAIhBwB,EAAQG,KAAK,KAJG,2CAAH,sDASf,OACE,cAAC,IAAD,CACEC,iBAAiB,4CACjBC,aAAa,OACbC,SAAU9D,EACV+D,YAAa7D,EACbwD,UAAWA,EACXM,UATc,SAACrC,GAAD,OAAwBjB,QAAQC,IAAIgB,IAUlDsC,WAAW,wBACXxG,UAAU,iBCjBDyG,MARf,WACE,IAEMC,ECHC,IAAI9C,gBAAgB+C,cAAcC,QDGlBhF,IAAI,QAE3B,OAAO,oCAAI8E,GAAY,mCAAGA,O,gBESrB,SAAeG,EAAtB,kC,4CAAO,WAAiCC,GAAjC,yBAAAlE,EAAA,6DACLK,QAAQC,IAAI,2BAA4B4D,GADnC,SAEwBC,YAAkB1D,EAAoB,CACjEyD,eACAE,eAAgB,IAChBC,mBAAmB,IAClBhD,MAAK,SAACC,GAAD,OAAcA,EAASgD,YAN1B,cAECC,EAFD,OAOCC,EAAsBD,EAAeE,SAAS,GAAGP,aACjDE,EAAiBG,EAAeE,SAAS,GAAGL,eAR7C,SAUiBM,YAAWjE,EAAoB,CACnD+D,sBACAG,WAAY,CAAC,KACbP,mBACC/C,MAAK,SAACC,GAAD,OAAcA,EAASgD,YAd1B,cAUCM,EAVD,OAgBCC,EAAaC,EAAiBF,GAC9BG,EAAiC,CACrCrC,mBAAoBwB,EACpBM,sBACAJ,iBACAY,SAAUH,EAAWI,OACrBC,QAASL,EAAWM,MACpBC,UAAWP,EAAWQ,SAvBnB,kBA0BEN,GA1BF,6C,sBAmCP,SAASD,EAAiBF,GACxB,IAAII,EAA0B,KAC5BE,EAAyB,KACzBE,EAA2B,KAC7B,GAAIR,EAAQC,WAAW1C,KAAM,CAC3B,IAAMmD,EAAoBV,EAAQC,WAAW1C,KAC7CoD,OAAOjH,KAAKsG,EAAQC,WAAW1C,MAAM5D,SAAQ,SAACiH,GAC5C,OAAQF,EAAkBE,GAAIC,WAC5B,KAAK,EACHP,EAAUM,EACV,MACF,KAAK,EACHR,EAAWQ,EACX,MACF,KAAK,EACHJ,EAAYI,EACZ,MACF,QACE,MAAM,IAAIhF,MAAM,0BAKxB,MAAO,CACLyE,OAAQD,EACRG,MAAOD,EACPG,QAASD,GAIN,SAAeM,IAAtB,+B,4CAAO,4BAAA1F,EAAA,sEACkB2F,YAAmBnE,GADrC,cACCF,EADD,yBAEEA,EAASgD,UAFX,4C,sBAKA,SAAesB,IAAtB,gC,8CAAO,8BAAA5F,EAAA,sEAGkB0F,IAHlB,cAGCG,EAHD,gBAIuBC,YAAwBtE,EAAO,CACzDuE,gBAAiBF,EACjBG,SAAU,KACVC,WAAY,CAAC,iCAAkC,2BAP5C,cAICC,EAJD,OASL7F,QAAQC,IAAI,CAAE4F,kBATT,kBAUEA,GAVF,4C,sBAkBP,SAASC,GAAgBpB,GACvB,IAAMC,EAAWD,EAAeC,SAC1BE,EAAUH,EAAeG,QACzBE,EAAYL,EAAeK,UAE3BjH,EAAyB,GAK/B,OAHI+G,GAAS/G,EAAMmF,KAAK,CAAEkC,GAAIN,EAASO,UAAW,IAC9CT,GAAU7G,EAAMmF,KAAK,CAAEkC,GAAIR,EAAUS,UAAW,IAChDL,GAAWjH,EAAMmF,KAAK,CAAEkC,GAAIJ,EAAWK,UAAW,IAC/CtH,EAGF,SAAeiI,GAAtB,mC,8CAAO,WAA0CrB,GAA1C,iBAAA/E,EAAA,6DACCqG,EAAeF,GAAgBpB,GAErC1E,QAAQiG,KAAK,8BACbjG,QAAQkG,QAAQ,8BAEVC,EAA0D,GAN3D,SAOC1D,QAAQ2D,IACZJ,EAAaK,IAAb,uCAAiB,iCAAA1G,EAAA,6DAASwF,EAAT,EAASA,GAAIC,EAAb,EAAaA,UAAb,SACQkB,GAAWnB,EAAIT,EAAeP,oBAAqBO,EAAeX,gBAD1E,OACT9C,EADS,OAEfkF,EAAaf,GAAanE,EAFX,2CAAjB,wDARG,cAcLjB,QAAQuG,QAAQ,8BAdX,kBAgBEJ,GAhBF,2C,yBAmBA,SAAeG,GAAtB,uC,8CAAO,WACLE,EACArC,EACAJ,GAHK,eAAApE,EAAA,sEAKkB8G,YAAarG,EAAoB,CACtDoG,cACAlC,WAAY,CAAC,IAAK,KAClBH,sBACAJ,mBATG,cAKC9C,EALD,yBAYEA,EAASgD,UAZX,4C,0BCvIFtH,G,kBCEUgC,G,iFAAf,WAAyBf,GAAzB,eAAA+B,EAAA,sEACoB+G,aAAO,iBAAkB,EAAG,CAC5CC,QAD4C,SACpCC,GACNA,EAAGC,kBAAkB,SAH3B,cACQC,EADR,yBAMSA,EAAInI,IAAI,KAAMf,IANvB,4C,+BASeU,G,mFAAf,WAAmBV,EAAamJ,GAAhC,eAAApH,EAAA,sEACoB+G,aAAO,iBAAkB,EAAG,CAC5CC,QAD4C,SACpCC,GACNA,EAAGC,kBAAkB,SAH3B,cACQC,EADR,yBAMSA,EAAIE,IAAI,KAAMD,EAAKnJ,IAN5B,4C,sBAmBO,SAAeqJ,GAAtB,mC,8CAAO,WACLzB,GADK,SAAA7F,EAAA,sEAGCrB,GAAI,iCAAkCkH,EAAS0B,gCAHhD,uBAIC5I,GAAI,wBAAyBkH,EAAS2B,uBAJvC,4C,sBAOA,SAAeC,KAAtB,gC,8CAAO,sBAAAzH,EAAA,sEACQhB,GAAI,yBADZ,oF,sBAIA,SAAe0I,KAAtB,gC,8CAAO,sBAAA1H,EAAA,sEAGQhB,GAAI,kCAHZ,oF,gCDzCFhC,K,mCAAAA,Q,SAagB2K,G,kDAGnB,aAAuB,wC,qDAWvB,WACE,IAAM5C,EAAiB/G,KAAKgB,IAAIhC,GAAO4K,iBACvC,GAAI7C,EAAgB,OAAOlG,KAAKI,MAAM8F,K,+BAKxC,SAAyBA,GACvB/G,KAAKW,IAAI3B,GAAO4K,gBAAiB7C,M,0BAfnC,WAIE,OAHK/G,KAAKmB,WACRnB,KAAKmB,SAAW,IAAIwI,GAEf3J,KAAKmB,a,GAXmCxB,GAA9BgK,GACJxI,c,EE4CF0I,OA/Cf,WACE,IAAM1E,EAAUC,cAChB,EAA8B0E,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAexJ,EAAaa,cAC5B4I,EAAwBP,GAAsBrI,cAE9C0C,EAASiG,EAAa1I,eACxB2E,EAAe,GAEnB,IAAKlC,EAGH,OAFA3B,QAAQ8H,KAAK,wBACbhF,EAAQG,KAAK,UACN,6BAELtB,IAAQkC,EAAY,OAAGlC,QAAH,IAAGA,OAAH,EAAGA,EAAQU,oBAEnC,IAAIqC,EAAiBmD,EAAsBjE,oBAjBf,4CAuB5B,gCAAAjE,EAAA,sEACwByH,KADxB,cACMW,EADN,gBAE2BV,KAF3B,UAEMW,EAFN,OAGOD,GAAcC,EAHrB,iCAIwCzC,IAJxC,cAIU0C,EAJV,iBAKUhB,GAAcgB,GALxB,yBAMsBb,KANtB,eAMIW,EANJ,iBAOyBV,KAPzB,QAOIW,EAPJ,kBASOtD,EATP,kCAU2Bd,EAAkBC,GAV7C,QAUIa,EAVJ,OAWImD,EAAsBK,kBAAkB1J,KAAKC,UAAUiG,IAX3D,QAcEiD,GAAW,GAdb,6CAvB4B,sBAwC5B,OArBAQ,qBAAU,YAnBkB,mCAoB1BC,KACC,IAmBCV,EACK,cAAC,EAAD,CAAS7K,KAAK,6BAGhB,8DC/CIwL,GAAmC,CAC9C,EAAG,SACH,EAAG,QACH,EAAG,WAGQC,GAAmC,CAC9C,UAAW,QACX,UAAW,SACX,UAAW,UACX,WAAY,WACZ,WAAY,QACZ,SAAU,SACV,WAAY,OAGDC,GAAiC,CAC5C,WAAY,WACZ,UAAW,aACX,WAAY,WACZ,WAAY,aACZ,UAAW,YACX,WAAY,YAGDC,GAAiC,CAC5C,GAAI,SACJ,GAAI,YACJ,GAAI,cACJ,GAAI,a,SCjCC,SAAeC,GAAtB,mC,8CAAO,WAAgCC,GAAhC,iCAAA/I,EAAA,6DACCgJ,EAA8B,GAE9BC,EAAa1D,OAAOjH,KAAKyK,GAAYrC,KAAI,SAACwC,GAAD,OAAOC,SAASD,MAE/D7I,QAAQiG,KAAK,8CACbjG,QAAQkG,QAAQ,8CANX,SAO0BmB,KAP1B,OAOC0B,EAPD,OAQL/I,QAAQuG,QAAQ,8CAEhBvG,QAAQiG,KAAK,oBACbjG,QAAQkG,QAAQ,oBAXX,eAYmB0C,GAZnB,2DAYMxD,EAZN,QAaHuD,EAAavD,GAAa,GACpB4D,EAAY9D,OAAOjH,KAAKqK,IAAcjC,KAAI,SAACwC,GAAD,OAAOC,SAASD,MAd7D,eAeoBG,GAfpB,kEAeQC,EAfR,kBAgByCC,GAASR,EAAWtD,GAAY6D,EAAUF,GAhBnF,QAgBDJ,EAAavD,GAAW6D,GAhBvB,wSAmBLjJ,QAAQuG,QAAQ,oBAnBX,kBAqBEoC,GArBF,gF,sBAoDA,IAAMQ,GAQX,WAAYC,GAA6B,yBAPlCC,SAAmB,EAOc,KANjCC,WAAqB,EAMY,KALjCC,SAAmB,EAKc,KAJjCC,WAAqB,EAIY,KAHjCC,UAAoB,EAGa,KAFjCC,SAAmB,EAGxBxE,OAAOyE,OAAOhM,KAAMyL,IAIXQ,GAAb,WAQE,WAAYR,GAA+B,yBAPpCC,SAAmB,EAOgB,KANnCC,WAAqB,EAMc,KALnCC,SAAmB,EAKgB,KAJnCC,WAAqB,EAIc,KAHnCC,UAAoB,EAGe,KAFnCC,SAAmB,EAGxBxE,OAAOyE,OAAOhM,KAAMyL,GATxB,sDAYE,WACE,MAAO,CAACzL,KAAK0L,SAAU1L,KAAK2L,WAAY3L,KAAK4L,UAAUM,MAAK,SAAClK,EAAGmK,GAAJ,OAAUA,EAAInK,OAb9E,gCAgBE,WACE,MAAO,CAAChC,KAAK6L,WAAY7L,KAAK8L,UAAW9L,KAAK+L,UAAUG,MAAK,SAAClK,EAAGmK,GAAJ,OAAUA,EAAInK,SAjB/E,K,SAqBeuJ,G,qFAAf,WACEa,EACAC,EACAjB,GAHF,+BAAApJ,EAAA,sDAWE,GAJMsK,EAAmB,GAEzBjK,QAAQiG,KAAR,mBAAyB+D,IACzBhK,QAAQkG,QAAR,mBAA4B8D,IACxBD,EAAQG,MAAMpI,KAAM,CAChBqI,EAAgBjF,OAAOjH,KAAK8L,EAAQG,MAAMpI,KAAKkI,GAAYI,WAAW/D,KAAI,SAACwC,GAAD,OAAOC,SAASD,MAC1FuB,EAAYL,EAAQG,MAAMpI,KAAKkI,GAAYI,UAF3B,eAGID,GAHJ,IAGtB,2BAAWE,EAA8B,QACjCC,EAAWF,EAAUC,GAAaC,SAClCC,EAAcxB,EAAiBuB,GAAUC,YACzCC,EAAkBzB,EAAiBuB,GAAUE,gBAC/CC,GAAWF,IAAoC,YAApBC,IAC7BP,EAAMM,GAAe,CAAED,WAAUI,QAASL,EAAaM,UAAWnC,GAAW+B,KAR3D,+BAX1B,OAuBEvK,QAAQuG,QAAR,mBAA4ByD,IAvB9B,kBAyBSC,GAzBT,4C,sBA4BA,SAASQ,GAAWF,GAElB,OADwBrF,OAAOjH,KAAKuK,IAAYnC,KAAI,SAACwC,GAAD,OAAOC,SAASD,MAC7C+B,SAASL,GAG3B,SAAeM,GAAtB,qC,8CAAO,WACLC,EACApC,GAFK,yBAAA/I,EAAA,sDAIL,IAAWyF,KAAa0F,EACtB,IAAWd,KAAcc,EAAc1F,GACrC,IAAWmF,KAAeO,EAAc1F,GAAW4E,GAC7CtB,EAAWtD,GAAW2F,eAAef,GAAYgB,MAAMlJ,OACnD4I,EAAUI,EAAc1F,GAAW4E,GAAYO,GAAaG,QAC5DM,EAAQtC,EAAWtD,GAAW2F,eAAef,GAAYgB,MAAMlJ,KAAM4I,GAC3EI,EAAc1F,GAAW4E,GAAYO,GAAaS,MAAQC,GAASD,EAAMA,OAEnEE,EAASC,GAAUL,EAAc1F,GAAW4E,GAAYO,GAAaS,MAAQlC,SAAS1D,IAC5F0F,EAAc1F,GAAW4E,GAAYO,GAAaa,SAAWF,EAAOE,SACpEN,EAAc1F,GAAW4E,GAAYO,GAAac,gBAAkBH,EAAOG,iBAd9E,yBAkBEP,GAlBF,4C,sBAqBP,SAASG,GAASD,GAChB,IAAMM,EAAa,IAAInC,GAEvB,IAAK,IAAMoC,KAAYP,EACrB,OAAQQ,GAAcD,IACpB,IAAK,WACHD,EAAWjC,SAAW2B,EAAMO,GAAUzN,MACtC,MACF,IAAK,aACHwN,EAAWhC,WAAa0B,EAAMO,GAAUzN,MACxC,MACF,IAAK,WACHwN,EAAW/B,SAAWyB,EAAMO,GAAUzN,MACtC,MACF,IAAK,aACHwN,EAAW9B,WAAawB,EAAMO,GAAUzN,MACxC,MACF,IAAK,YACHwN,EAAW7B,UAAYuB,EAAMO,GAAUzN,MACvC,MACF,IAAK,WACHwN,EAAW5B,SAAWsB,EAAMO,GAAUzN,MACtC,MACF,QACE,MAAM,IAAIqC,MAAM,6BAItB,OAAOmL,EAGT,SAASH,GAAUG,EAAwBlG,GACzC,IAkBiCqG,EAAeC,EAlB1CC,EAsBR,SAAoBvG,GAClB,OAAQA,GACN,KAAK,EACH,OAUG,IAAIwE,GAAa,CAAEL,SAAU,EAAGC,WAAY,EAAGF,WAAY,IAThE,KAAK,EACH,OAYG,IAAIM,GAAa,CAAEL,SAAU,EAAGC,WAAY,EAAGH,SAAU,IAX9D,KAAK,EACH,OAcG,IAAIO,GAAa,CAAEL,SAAU,EAAGC,WAAY,IAZnD,OAAO,IAAII,GA/BKgC,CAAWxG,GACrBgG,EAMD,SAAqBE,EAAwBK,GAClD,IAAIF,EAAQ,EAOZ,OANAA,GAASH,EAAWjC,SAAWsC,EAAQtC,SACvCoC,GAASH,EAAWhC,WAAaqC,EAAQrC,WACzCmC,GAASH,EAAW/B,SAAWoC,EAAQpC,SACvCkC,GAASH,EAAW9B,WAAamC,EAAQnC,WACzCiC,GAASH,EAAW7B,UAAYkC,EAAQlC,UACxCgC,GAASH,EAAW5B,SAAWiC,EAAQjC,SAbtBmC,CAAYP,EAAYK,GAGzC,MAAO,CAAEP,WAAUC,iBAccI,EAhBUL,EAgBKM,EA4B3C,SAA2BI,GAChC,IAAMC,EAAkB,GAClBC,EAAkB,EAElBC,EAAkBH,EAAaI,qBAC/BC,EAAkBL,EAAaM,qBAErC,OACEL,GAAmBE,EAAgB,GAAKE,EAAgB,IACxDH,GAAmBC,EAAgB,GAAKA,EAAgB,GAAKE,EAAgB,GAAKA,EAAgB,IArD/CE,CAAkBV,GAiBhEW,KAAKC,MAAOd,EAAQC,EAAkB,OCjHhCc,OA7Ef,WACE,MAA8B/E,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,6BAAnD,mBAAOgF,EAAP,KAAsBC,EAAtB,KACA,EAAsCjF,qBAAtC,mBAAOkF,EAAP,KAAoBC,EAApB,KAEMlI,EAAiB4C,GAAsBrI,cAAc2E,oBAL5B,4CAW/B,gCAAAjE,EAAA,0DACM+E,EADN,iCAE6BqB,GAA2BrB,GAFxD,cAEUgE,EAFV,OAGIgE,EAAiB,0BAHrB,SAIgCG,GAAiBnE,GAJjD,cAIUoE,EAJV,OAKIJ,EAAiB,iBALrB,UAMyB7B,GAAeiC,EAAepE,GANvD,QAMUwC,EANV,OAOI0B,EAAe1B,GAPnB,QASEvD,GAAW,GATb,6CAX+B,sBAuB/B,OAhBAQ,qBAAU,YAPqB,mCAQ7B4E,KACC,IAeD,gCACGrF,GAAW,cAAC,EAAD,CAAS7K,KAAM4P,EAAe3P,WAAW,IACpD6P,GACCzH,OAAOjH,KAAK0O,GACTtG,KAAI,SAACwC,GAAD,OAAOC,SAASD,MACpBxC,KAAI,SAAC2G,GAAD,OACH,kCACE,+BACE,6BAAK3E,GAAa2E,KACjB9H,OAAOjH,KAAKqK,IACVjC,KAAI,SAACwC,GAAD,OAAOC,SAASD,MACpBxC,KAAI,SAAC4G,GAAD,OACH,6BAAqB3E,GAAa2E,IAAzBA,SAId/H,OAAOjH,KAAKuK,IACVnC,KAAI,SAACwC,GAAD,OAAOC,SAASD,MACpBxC,KAAI,SAACsE,GAAD,OACH,+BACE,oBAAIuC,MAAM,MAAV,SAAiB1E,GAAWmC,KAC3BzF,OAAOjH,KAAKqK,IACVjC,KAAI,SAACwC,GAAD,OAAOC,SAASD,MACpBxC,KAAI,SAAC2D,GAAD,OACH,6BAAsB2C,EAAYK,GAAUhD,GAAYW,GAAWU,iBAA1DrB,QALNW,QAbHqC,UCTTG,OAlBf,WACE,MAAqB1F,oBAAS,GAA9B,mBAAOC,EAAP,KAEA,OAFA,KAGE,sBAAK3K,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqQ,OAAO,EAAMC,KAAK,SAASC,UAAWzK,IAC7C,cAAC,IAAD,CAAOuK,OAAO,EAAMC,KAAK,WAAWC,UAAWd,KAC/C,cAAC,IAAD,CAAOY,OAAO,EAAMC,KAAK,YAAYC,UAAW9J,IAChD,cAAC,IAAD,CAAO4J,OAAO,EAAMC,KAAK,IAAIC,UAAW9F,KACxC,cAAC,IAAD,CAAUrI,GAAG,SAEduI,GAAW,cAAC,EAAD,CAAS7K,KAAK,2BAA2BC,WAAW,QCTvDyQ,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzM,MAAK,YAAkD,IAA/C0M,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.97980f20.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { ReactElement } from 'react';\nimport './spinner.scss';\n\nexport interface SpinnerDisplayProps {\n  text?: string;\n  noOverlay?: boolean;\n  className?: string | string[];\n}\n\nfunction Spinner(props: SpinnerDisplayProps): ReactElement {\n  const { text, noOverlay, className, ...rest } = props;\n\n  const classes = classNames('Spinner', noOverlay && 'Spinner--noOverlay', className);\n\n  return (\n    <div {...rest} className={classes}>\n      <div className=\"Spinner-spinner\">\n        <svg viewBox=\"0 0 64 64\">\n          <circle transform=\"translate(32,32)\" r=\"26\" />\n        </svg>\n      </div>\n      {text ? <div className=\"Spinner-content\">{text}</div> : null}\n    </div>\n  );\n}\n\nexport default Spinner;\n","import Storage from './Storage';\n\nenum Locals {\n  ALL_TOKENS = 'all_tokens',\n}\n\nexport interface AccessTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token: string;\n  refresh_expires_in: number;\n  membership_id: string;\n}\n\nexport interface Tokens {\n  accessToken: Token;\n  refreshToken?: Token;\n  bungieMembershipId: string;\n}\n\nexport interface Token {\n  /** The oauth token key */\n  value: string;\n  /** The token expires this many seconds after it is acquired. */\n  expires: number;\n  name: 'access' | 'refresh';\n  /** A UTC epoch milliseconds timestamp representing when the token was acquired. */\n  inception: number;\n}\n\nexport default class TokenStorage extends Storage<Locals> {\n  private static instance?: TokenStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): TokenStorage {\n    if (!this.instance) {\n      this.instance = new TokenStorage();\n    }\n\n    return this.instance;\n  }\n  public setAllTokens(token: Tokens): void {\n    this.set(Locals.ALL_TOKENS, JSON.stringify(token));\n  }\n\n  public getAllTokens(): Tokens | null {\n    const allTokens = this.get(Locals.ALL_TOKENS);\n\n    return allTokens ? JSON.parse(allTokens) : null;\n  }\n\n  public clear(): void {\n    this.clearItems([Locals.ALL_TOKENS]);\n  }\n}\n","interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n  removeItem(key: string): void;\n}\n\nexport default abstract class Storage<T extends string> {\n  private readonly storage: IStorage;\n\n  public constructor(getStorage = (): IStorage => window.localStorage) {\n    this.storage = getStorage();\n  }\n\n  protected get(key: T): string | null {\n    return this.storage.getItem(key);\n  }\n\n  protected set(key: T, value: string): void {\n    this.storage.setItem(key, value);\n  }\n\n  protected clearItem(key: T): void {\n    this.storage.removeItem(key);\n  }\n\n  protected clearItems(keys: T[]): void {\n    keys.forEach((key) => {\n      return this.clearItem(key);\n    });\n  }\n}\n","import { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\nimport TokenStorage from '../../storage/Tokens';\nimport './nav.scss';\n\nfunction Nav(): ReactElement {\n  const isAuthorized = TokenStorage.getInstance().getAllTokens();\n  return (\n    <div className=\"navbar\">\n      <Link to=\"/\">Home</Link>\n      {!isAuthorized && <Link to=\"/login\">Login</Link>}\n      {isAuthorized && <Link to=\"/vendors\">Vendors</Link>}\n    </div>\n  );\n}\n\nexport default Nav;\n","import { HttpClientConfig } from 'bungie-api-ts/http';\nimport TokenStorage, { Token, Tokens } from './storage/Tokens';\n\nexport const API_KEY = process.env.REACT_APP_BUNGIE_API_KEY || '';\nexport const CLIENT_ID = process.env.REACT_APP_BUNGIE_CLIENT_ID || '';\nexport const CLIENT_SECRET = process.env.REACT_APP_BUNGIE_CLIENT_SECRET || '';\nexport const REDIRECT_URI = process.env.REACT_APP_BUNGIE_REDIRECT_URI || '';\n\nexport const bungieApiRoot = 'https://www.bungie.net/Platform';\n\nexport async function getActiveToken(): Promise<Tokens> {\n  const allTokens = TokenStorage.getInstance().getAllTokens();\n\n  if (!allTokens) {\n    TokenStorage.getInstance().clear();\n  }\n\n  const accessTokenIsValid = allTokens && !hasTokenExpired(allTokens.accessToken);\n  if (accessTokenIsValid) return allTokens;\n\n  const refreshTokenIsValid = allTokens && !hasTokenExpired(allTokens.refreshToken);\n  if (!refreshTokenIsValid) {\n    console.log('We need to fetch a new token here');\n  }\n\n  try {\n    if (allTokens) return await getAccessTokenFromRefreshToken(allTokens.refreshToken!);\n    throw new Error();\n  } catch (e) {\n    throw new Error('I dunno');\n  }\n}\n\nexport async function $httpAuthenticated(config: HttpClientConfig): Promise<Response> {\n  const token = await getActiveToken();\n\n  if (!token) {\n    console.error('We need a new token');\n    throw new Error('Some token error');\n  }\n  const headers = {\n    authorization: `Bearer ${token.accessToken.value}`,\n    'x-api-key': API_KEY,\n  };\n\n  let url = config.url;\n  if (config.params) {\n    // strip out undefined params keys. bungie-api-ts creates them for optional endpoint parameters\n    for (const key in config.params) {\n      typeof config.params[key] === 'undefined' && delete config.params[key];\n    }\n    url = `${url}?${new URLSearchParams(config.params as Record<string, string>).toString()}`;\n  }\n  console.log('Creating http client', { token });\n  console.log('Fetching from', config.url, 'with headers', headers, 'body', config.body, 'params', config.params);\n\n  return fetch(url, {\n    method: config.method,\n    body: config.body,\n    headers,\n  }).then((response) => response.json());\n}\n\nexport async function $http(config: HttpClientConfig): Promise<Response> {\n  return fetch(config.url, {\n    method: config.method,\n    body: config.body,\n  }).then((res) => res.json());\n}\n\nexport function getAccessTokenFromCode(code: string): Promise<void> {\n  const body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code,\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n  });\n  return fetch(`${bungieApiRoot}/app/oauth/token/`, { method: 'POST', body })\n    .then((res) => res.json())\n    .then(handleAccessToken)\n    .then((tokens) => TokenStorage.getInstance().setAllTokens(tokens));\n}\n\nfunction handleAccessToken(\n  response:\n    | {\n        access_token: string;\n        expires_in: number;\n        membership_id: string;\n        refresh_token?: string;\n        refresh_expires_in: number;\n      }\n    | undefined,\n): Tokens {\n  if (response?.access_token) {\n    const data = response;\n    const inception = Date.now();\n    const accessToken: Token = {\n      value: data.access_token,\n      expires: data.expires_in,\n      name: 'access',\n      inception,\n    };\n\n    const tokens: Tokens = {\n      accessToken,\n      bungieMembershipId: data.membership_id,\n    };\n\n    if (data.refresh_token) {\n      tokens.refreshToken = {\n        value: data.refresh_token,\n        expires: data.refresh_expires_in,\n        name: 'refresh',\n        inception,\n      };\n    }\n\n    return tokens;\n  } else {\n    throw new Error('No tokens');\n  }\n}\n\nexport function getAccessTokenFromRefreshToken(refreshToken: Token): Promise<Tokens> {\n  const body = new URLSearchParams({\n    grant_type: 'refresh_token',\n    refresh_token: refreshToken.value,\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n  });\n\n  return Promise.resolve(\n    fetch(`${bungieApiRoot}/app/oauth/token/`, {\n      method: 'POST',\n      body,\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    })\n      .then((response) => (response.ok ? response.json() : Promise.reject(response)))\n      .then(handleAccessToken)\n      .then((token) => {\n        TokenStorage.getInstance().setAllTokens(token);\n        return token;\n      }),\n  );\n}\n\nfunction hasTokenExpired(token?: Token): boolean {\n  if (!token) return true;\n\n  const expires = token.expires * 1000 + token.inception;\n  const now = Date.now();\n\n  return now > expires;\n}\n","import { ReactElement } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport OAuth2Login from 'react-simple-oauth2-login';\nimport { CLIENT_ID, getAccessTokenFromCode, REDIRECT_URI } from '../../helpers';\nimport './login.scss';\n\nfunction Login(): ReactElement {\n  const history = useHistory();\n  console.log('Using redirect', REDIRECT_URI);\n\n  const onSuccess = async (response: any) => {\n    const code = response.code;\n    console.log({ code });\n    await getAccessTokenFromCode(code);\n    history.push('/');\n  };\n\n  const onFailure = (response: Response) => console.log(response);\n\n  return (\n    <OAuth2Login\n      authorizationUrl=\"https://www.bungie.net/en/Oauth/Authorize\"\n      responseType=\"code\"\n      clientId={CLIENT_ID}\n      redirectUri={REDIRECT_URI}\n      onSuccess={onSuccess}\n      onFailure={onFailure}\n      buttonText=\"Login with Bungie.net\"\n      className=\"loginButton\"\n    />\n  );\n}\n\nexport default Login;\n","import { ReactElement } from 'react';\nimport { useQuery } from '../../hooks';\n\nfunction Callback(): ReactElement {\n  const query = useQuery();\n\n  const authCode = query.get('code');\n\n  return <>{!authCode && <>{authCode}</>}</>;\n}\n\nexport default Callback;\n","import { useLocation } from 'react-router-dom';\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import {\n  BungieMembershipType,\n  DestinyClass,\n  DestinyComponentType,\n  DestinyManifest,\n  DestinyManifestSlice,\n  DestinyProfileResponse,\n  DestinyVendorsResponse,\n  getDestinyManifest,\n  getDestinyManifestSlice,\n  getLinkedProfiles,\n  getProfile,\n  getVendors as getVendorsTs,\n} from 'bungie-api-ts/destiny2';\nimport { $http, $httpAuthenticated } from '../helpers';\nimport { MembershipInfo } from '../storage/Membership';\n\nexport async function getMembershipInfo(membershipId: string): Promise<MembershipInfo> {\n  console.log('Fetching membership info', membershipId);\n  const linkedProfiles = await getLinkedProfiles($httpAuthenticated, {\n    membershipId,\n    membershipType: 254,\n    getAllMemberships: true,\n  }).then((response) => response.Response);\n  const destinyMembershipId = linkedProfiles.profiles[0].membershipId;\n  const membershipType = linkedProfiles.profiles[0].membershipType;\n\n  const profile = await getProfile($httpAuthenticated, {\n    destinyMembershipId,\n    components: [200],\n    membershipType,\n  }).then((response) => response.Response);\n\n  const characters = getCharactersIds(profile);\n  const membershipInfo: MembershipInfo = {\n    bungieMembershipId: membershipId,\n    destinyMembershipId,\n    membershipType,\n    hunterId: characters.hunter,\n    titanId: characters.titan,\n    warlockId: characters.warlock,\n  };\n\n  return membershipInfo;\n}\n\nexport interface Characters {\n  hunter: string | null;\n  titan: string | null;\n  warlock: string | null;\n}\n\nfunction getCharactersIds(profile: DestinyProfileResponse): Characters {\n  let hunterId: string | null = null,\n    titanId: string | null = null,\n    warlockId: string | null = null;\n  if (profile.characters.data) {\n    const profileCharacters = profile.characters.data;\n    Object.keys(profile.characters.data).forEach((id) => {\n      switch (profileCharacters[id].classType) {\n        case 0:\n          titanId = id;\n          break;\n        case 1:\n          hunterId = id;\n          break;\n        case 2:\n          warlockId = id;\n          break;\n        default:\n          throw new Error('Unknown class type');\n      }\n    });\n  }\n\n  return {\n    hunter: hunterId,\n    titan: titanId,\n    warlock: warlockId,\n  };\n}\n\nexport async function getManifest(): Promise<DestinyManifest> {\n  const response = await getDestinyManifest($http);\n  return response.Response;\n}\n\nexport async function getDestinyInventoryItemManifest(): Promise<\n  DestinyManifestSlice<['DestinyInventoryItemDefinition', 'DestinyStatDefinition']>\n> {\n  const manifest = await getManifest();\n  const manifestSlice = await getDestinyManifestSlice($http, {\n    destinyManifest: manifest,\n    language: 'en',\n    tableNames: ['DestinyInventoryItemDefinition', 'DestinyStatDefinition'],\n  });\n  console.log({ manifestSlice });\n  return manifestSlice;\n}\n\nexport interface CharacterToId {\n  id: string;\n  classType: DestinyClass;\n}\n\nfunction mapCharacterIds(membershipInfo: MembershipInfo): CharacterToId[] {\n  const hunterId = membershipInfo.hunterId;\n  const titanId = membershipInfo.titanId;\n  const warlockId = membershipInfo.warlockId;\n\n  const value: CharacterToId[] = [];\n\n  if (titanId) value.push({ id: titanId, classType: 0 });\n  if (hunterId) value.push({ id: hunterId, classType: 1 });\n  if (warlockId) value.push({ id: warlockId, classType: 2 });\n  return value;\n}\n\nexport async function getVendorsForAllCharacters(membershipInfo: MembershipInfo) {\n  const characterIds = mapCharacterIds(membershipInfo);\n\n  console.time('getVendorsForAllCharacters');\n  console.timeLog('getVendorsForAllCharacters');\n\n  const fullResponse: { [key: number]: DestinyVendorsResponse } = {};\n  await Promise.all(\n    characterIds.map(async ({ id, classType }) => {\n      const response = await getVendors(id, membershipInfo.destinyMembershipId, membershipInfo.membershipType);\n      fullResponse[classType] = response;\n    }),\n  );\n\n  console.timeEnd('getVendorsForAllCharacters');\n\n  return fullResponse;\n}\n\nexport async function getVendors(\n  characterId: string,\n  destinyMembershipId: string,\n  membershipType: BungieMembershipType,\n): Promise<DestinyVendorsResponse> {\n  const response = await getVendorsTs($httpAuthenticated, {\n    characterId,\n    components: [304, 402],\n    destinyMembershipId,\n    membershipType,\n  });\n\n  return response.Response;\n}\n","import Storage from './Storage';\n\nenum Locals {\n  MEMBERSHIP_INFO = 'membership_info',\n}\n\nexport interface MembershipInfo {\n  bungieMembershipId: string;\n  hunterId: string | null;\n  titanId: string | null;\n  warlockId: string | null;\n  destinyMembershipId: string;\n  membershipType: number;\n}\n\nexport default class MembershipInfoStorage extends Storage<Locals> {\n  private static instance?: MembershipInfoStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): MembershipInfoStorage {\n    if (!this.instance) {\n      this.instance = new MembershipInfoStorage();\n    }\n    return this.instance;\n  }\n\n  public getMembershipInfo(): MembershipInfo | undefined {\n    const membershipInfo = this.get(Locals.MEMBERSHIP_INFO);\n    if (membershipInfo) return JSON.parse(membershipInfo);\n\n    return undefined;\n  }\n\n  public setMembershipInfo(membershipInfo: string): void {\n    this.set(Locals.MEMBERSHIP_INFO, membershipInfo);\n  }\n}\n","import { DestinyInventoryItemDefinition, DestinyManifestSlice, DestinyStatDefinition } from 'bungie-api-ts/destiny2';\nimport { openDB } from 'idb';\n\n// TODO: make this a class\nasync function get<Type>(key: string): Promise<Type> {\n  const dbp = await openDB('destiny2-store', 1, {\n    upgrade(db) {\n      db.createObjectStore('d2');\n    },\n  });\n  return dbp.get('d2', key);\n}\n\nasync function set(key: string, val: any) {\n  const dbp = await openDB('destiny2-store', 1, {\n    upgrade(db) {\n      db.createObjectStore('d2');\n    },\n  });\n  return dbp.put('d2', val, key);\n}\n\n// async function del(key: string) {\n//   return (await dbp).delete('d2', key);\n// }\n// async function clear() {\n//   return (await dbp).clear('d2');\n// }\n// async function keys() {\n//   return (await dbp).getAllKeys('d2');\n// }\n\nexport async function storeManifest(\n  manifest: DestinyManifestSlice<['DestinyInventoryItemDefinition', 'DestinyStatDefinition']>,\n): Promise<void> {\n  await set('DestinyInventoryItemDefinition', manifest.DestinyInventoryItemDefinition);\n  await set('DestinyStatDefinition', manifest.DestinyStatDefinition);\n}\n\nexport async function getDestinyStatDefinitionFromStore(): Promise<{ [key: number]: DestinyStatDefinition }> {\n  return await get('DestinyStatDefinition');\n}\n\nexport async function getDestinyInventoryItemDefinitionFromStore(): Promise<{\n  [key: number]: DestinyInventoryItemDefinition;\n}> {\n  return await get('DestinyInventoryItemDefinition');\n}\n","import { DestinyStatDefinition } from 'bungie-api-ts/destiny2';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { getDestinyInventoryItemManifest, getMembershipInfo } from '../../bungie-api/destiny2-api';\nimport Spinner from '../../components/Spinner/Spinner';\nimport {\n  getDestinyInventoryItemDefinitionFromStore,\n  getDestinyStatDefinitionFromStore,\n  storeManifest,\n} from '../../storage/IndexedDB';\nimport MembershipInfoStorage from '../../storage/Membership';\nimport TokenStorage from '../../storage/Tokens';\n\nfunction Home(): ReactElement {\n  const history = useHistory();\n  const [loading, setLoading] = useState(true);\n\n  const tokenStorage = TokenStorage.getInstance();\n  const membershipInfoStorage = MembershipInfoStorage.getInstance();\n\n  const tokens = tokenStorage.getAllTokens();\n  let membershipId = '';\n\n  if (!tokens) {\n    console.info('Redirecting to Login');\n    history.push('/Login');\n    return <></>;\n  }\n  if (tokens) membershipId = tokens?.bungieMembershipId;\n\n  let membershipInfo = membershipInfoStorage.getMembershipInfo();\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function getData() {\n    let d2StatDef = await getDestinyStatDefinitionFromStore();\n    let d2invItemDef = await getDestinyInventoryItemDefinitionFromStore();\n    if (!d2StatDef || !d2invItemDef) {\n      const inventoryItemManifest = await getDestinyInventoryItemManifest();\n      await storeManifest(inventoryItemManifest);\n      d2StatDef = await getDestinyStatDefinitionFromStore();\n      d2invItemDef = await getDestinyInventoryItemDefinitionFromStore();\n    }\n    if (!membershipInfo) {\n      membershipInfo = await getMembershipInfo(membershipId);\n      membershipInfoStorage.setMembershipInfo(JSON.stringify(membershipInfo));\n    }\n\n    setLoading(false);\n  }\n\n  if (loading) {\n    return <Spinner text=\"Loading Destiny manifest\" />;\n  }\n\n  return <>This is the home page</>;\n}\n\nexport default Home;\n","export interface Dictionary<T> {\n  [Key: string]: T;\n}\n\nexport const classHashMap: Dictionary<string> = {\n  '3655393761': 'Titan',\n  '671679327': 'Hunter',\n  '2271682572': 'Warlock',\n};\n\nexport const classTypeMap: Dictionary<string> = {\n  1: 'Hunter',\n  0: 'Titan',\n  2: 'Warlock',\n};\n\nexport const vendorHashes: Dictionary<string> = {\n  350061650: 'Ada-1',\n  396892126: 'Devrim',\n  248695599: 'Drifter',\n  1576276905: 'Failsafe',\n  3603221665: 'Shaxx',\n  69482069: 'Zavala',\n  2190858386: 'Xur',\n};\n\nexport const statHashes: Dictionary<string> = {\n  2996146975: 'Mobility',\n  392767087: 'Resilience',\n  1943323491: 'Recovery',\n  1735777505: 'Discipline',\n  144602215: 'Intellect',\n  4244567218: 'Strength',\n};\n\nexport const armorTypes: Dictionary<string> = {\n  26: 'Helmet',\n  27: 'Gauntlets',\n  28: 'Chest Armor',\n  29: 'Leg Armor',\n};\n","import { DestinyInventoryItemDefinition, DestinyStat, DestinyVendorsResponse } from 'bungie-api-ts/destiny2';\nimport { armorTypes, statHashes as statHashesMap, vendorHashes } from '../hashes';\nimport { getDestinyInventoryItemDefinitionFromStore } from '../storage/IndexedDB';\n\nconst nameof = <T>(name: Extract<keyof T, string>): string => name;\n\nexport async function getScorableItems(allVendors: { [key: number]: DestinyVendorsResponse }): Promise<ScorableItems> {\n  const classToArmor: ScorableItems = {};\n\n  const classTypes = Object.keys(allVendors).map((x) => parseInt(x));\n\n  console.time('getDestinyInventoryItemDefinitionFromStore');\n  console.timeLog('getDestinyInventoryItemDefinitionFromStore');\n  const d2inventoryItems = await getDestinyInventoryItemDefinitionFromStore();\n  console.timeEnd('getDestinyInventoryItemDefinitionFromStore');\n\n  console.time('getScorableItems');\n  console.timeLog('getScorableItems');\n  for (const classType of classTypes) {\n    classToArmor[classType] = {};\n    const vendorIds = Object.keys(vendorHashes).map((x) => parseInt(x));\n    for (const vendorId of vendorIds) {\n      classToArmor[classType][vendorId] = await getArmor(allVendors[classType], vendorId, d2inventoryItems);\n    }\n  }\n  console.timeEnd('getScorableItems');\n\n  return classToArmor;\n}\n\nexport interface ScorableItems {\n  [classType: number]: VendorArmor;\n}\n\nexport interface VendorArmor {\n  [vendorHash: number]: SaleArmor;\n}\n\nexport interface SaleArmor {\n  [armorType: number]: {\n    saleKey?: number;\n    itemHash?: number;\n    armorType?: string;\n    stats?: ArmorStats;\n    rawScore?: number;\n    normalizedScore?: number;\n  };\n}\n\nexport interface Armor {\n  saleKey?: number;\n  itemHash?: number;\n  armorType?: string;\n  stats?: ArmorStats;\n  rawScore?: number;\n  normalizedScore?: number;\n}\n\nexport class ArmorStats {\n  public Mobility: number = 0;\n  public Resilience: number = 0;\n  public Recovery: number = 0;\n  public Discipline: number = 0;\n  public Intellect: number = 0;\n  public Strength: number = 0;\n\n  constructor(init?: Partial<ArmorStats>) {\n    Object.assign(this, init);\n  }\n}\n\nexport class ArmorScoring {\n  public Mobility: number = 0;\n  public Resilience: number = 0;\n  public Recovery: number = 0;\n  public Discipline: number = 0;\n  public Intellect: number = 0;\n  public Strength: number = 0;\n\n  constructor(init?: Partial<ArmorScoring>) {\n    Object.assign(this, init);\n  }\n\n  getSortedSubGroup1(): number[] {\n    return [this.Mobility, this.Resilience, this.Recovery].sort((a, b) => b - a);\n  }\n\n  getSortedSubGroup2(): number[] {\n    return [this.Discipline, this.Intellect, this.Strength].sort((a, b) => b - a);\n  }\n}\n\nasync function getArmor(\n  vendors: DestinyVendorsResponse,\n  vendorHash: number,\n  d2inventoryItems: {\n    [key: number]: DestinyInventoryItemDefinition;\n  },\n): Promise<SaleArmor> {\n  const armor: SaleArmor = {};\n\n  console.time(`getArmor ${vendorHash}`);\n  console.timeLog(`getArmor ${vendorHash}`);\n  if (vendors.sales.data) {\n    const saleItemsKeys = Object.keys(vendors.sales.data[vendorHash].saleItems).map((x) => parseInt(x));\n    const saleItems = vendors.sales.data[vendorHash].saleItems;\n    for (const saleItemKey of saleItemsKeys) {\n      const itemHash = saleItems[saleItemKey].itemHash;\n      const itemSubType = d2inventoryItems[itemHash].itemSubType;\n      const summaryItemHash = d2inventoryItems[itemHash].summaryItemHash!;\n      if (isScorable(itemSubType) && summaryItemHash !== 715326750) {\n        armor[itemSubType] = { itemHash, saleKey: saleItemKey, armorType: armorTypes[itemSubType] };\n      }\n    }\n  }\n  console.timeEnd(`getArmor ${vendorHash}`);\n\n  return armor;\n}\n\nfunction isScorable(itemSubType: number): boolean {\n  const armorTypeHashes = Object.keys(armorTypes).map((x) => parseInt(x));\n  return armorTypeHashes.includes(itemSubType);\n}\n\nexport async function getArmorScores(\n  scorableItems: ScorableItems,\n  allVendors: { [key: number]: DestinyVendorsResponse },\n) {\n  for (const classType in scorableItems) {\n    for (const vendorHash in scorableItems[classType])\n      for (const itemSubType in scorableItems[classType][vendorHash]) {\n        if (allVendors[classType].itemComponents[vendorHash].stats.data) {\n          const saleKey = scorableItems[classType][vendorHash][itemSubType].saleKey!;\n          const stats = allVendors[classType].itemComponents[vendorHash].stats.data![saleKey];\n          scorableItems[classType][vendorHash][itemSubType].stats = getStats(stats.stats);\n\n          const scores = getScores(scorableItems[classType][vendorHash][itemSubType].stats!, parseInt(classType));\n          scorableItems[classType][vendorHash][itemSubType].rawScore = scores.rawScore;\n          scorableItems[classType][vendorHash][itemSubType].normalizedScore = scores.normalizedScore;\n        }\n      }\n  }\n  return scorableItems;\n}\n\nfunction getStats(stats: { [key: number]: DestinyStat }): ArmorStats {\n  const armorStats = new ArmorStats();\n\n  for (const statHash in stats) {\n    switch (statHashesMap[statHash]) {\n      case 'Mobility':\n        armorStats.Mobility = stats[statHash].value;\n        break;\n      case 'Resilience':\n        armorStats.Resilience = stats[statHash].value;\n        break;\n      case 'Recovery':\n        armorStats.Recovery = stats[statHash].value;\n        break;\n      case 'Discipline':\n        armorStats.Discipline = stats[statHash].value;\n        break;\n      case 'Intellect':\n        armorStats.Intellect = stats[statHash].value;\n        break;\n      case 'Strength':\n        armorStats.Strength = stats[statHash].value;\n        break;\n      default:\n        throw new Error('No idea what stat this is');\n    }\n  }\n\n  return armorStats;\n}\n\nfunction getScores(armorStats: ArmorStats, classType: number): { rawScore: number; normalizedScore: number } {\n  const scoring = getScoring(classType);\n  const rawScore = getRawScore(armorStats, scoring);\n  const normalizedScore = getNormalizedScore(rawScore, getTheoreticalMax(scoring));\n\n  return { rawScore, normalizedScore };\n}\n\nexport function getRawScore(armorStats: ArmorStats, scoring: ArmorScoring): number {\n  let score = 0;\n  score += armorStats.Mobility * scoring.Mobility;\n  score += armorStats.Resilience * scoring.Resilience;\n  score += armorStats.Recovery * scoring.Recovery;\n  score += armorStats.Discipline * scoring.Discipline;\n  score += armorStats.Intellect * scoring.Intellect;\n  score += armorStats.Strength * scoring.Strength;\n  return score;\n}\n\nexport function getNormalizedScore(score: number, theoreticalMax: number): number {\n  return Math.round((score / theoreticalMax) * 100);\n}\n\nfunction getScoring(classType: number): ArmorScoring {\n  switch (classType) {\n    case 0:\n      return getTitanScoring();\n    case 1:\n      return getHunterScoring();\n    case 2:\n      return getWarlockScoring();\n  }\n  return new ArmorScoring();\n}\n\nfunction getTitanScoring(): ArmorScoring {\n  return new ArmorScoring({ Recovery: 3, Discipline: 2, Resilience: 1 });\n}\n\nfunction getHunterScoring(): ArmorScoring {\n  return new ArmorScoring({ Recovery: 3, Discipline: 2, Mobility: 1 });\n}\n\nfunction getWarlockScoring(): ArmorScoring {\n  return new ArmorScoring({ Recovery: 3, Discipline: 3 });\n}\n\nexport function getTheoreticalMax(armorScoring: ArmorScoring) {\n  const maxStatPossible = 30;\n  const minStatPossible = 2;\n\n  const sortedSubGroup1 = armorScoring.getSortedSubGroup1();\n  const sortedSubGroup2 = armorScoring.getSortedSubGroup2();\n\n  return (\n    maxStatPossible * (sortedSubGroup1[0] + sortedSubGroup2[0]) +\n    minStatPossible * (sortedSubGroup1[1] + sortedSubGroup1[2] + sortedSubGroup2[1] + sortedSubGroup2[2])\n  );\n}\n","import { ReactElement, useEffect, useState } from 'react';\nimport { getVendorsForAllCharacters } from '../../bungie-api/destiny2-api';\nimport Spinner from '../../components/Spinner/Spinner';\nimport { armorTypes, classTypeMap, vendorHashes } from '../../hashes';\nimport { getArmorScores, getScorableItems as getScorableArmor, ScorableItems } from '../../scoring/items';\nimport MembershipInfoStorage from '../../storage/Membership';\n\nfunction Vendors(): ReactElement {\n  const [loading, setLoading] = useState(true);\n  const [currentStatus, setCurrentStatus] = useState('Fetching Vendor inventory');\n  const [armorScores, setArmorScores] = useState<ScorableItems>();\n\n  const membershipInfo = MembershipInfoStorage.getInstance().getMembershipInfo();\n\n  useEffect(() => {\n    fetchVendorInventory();\n  }, []);\n\n  async function fetchVendorInventory() {\n    if (membershipInfo) {\n      const allVendors = await getVendorsForAllCharacters(membershipInfo);\n      setCurrentStatus('Getting scorable armor');\n      const scorableArmor = await getScorableArmor(allVendors);\n      setCurrentStatus('Scoring armor');\n      const scores = await getArmorScores(scorableArmor, allVendors);\n      setArmorScores(scores);\n    }\n    setLoading(false);\n  }\n\n  return (\n    <div>\n      {loading && <Spinner text={currentStatus} noOverlay={true} />}\n      {armorScores &&\n        Object.keys(armorScores)\n          .map((x) => parseInt(x))\n          .map((classKey) => (\n            <table key={classKey}>\n              <tr>\n                <th>{classTypeMap[classKey]}</th>\n                {Object.keys(vendorHashes)\n                  .map((x) => parseInt(x))\n                  .map((vendorKey) => (\n                    <th key={vendorKey}>{vendorHashes[vendorKey]}</th>\n                  ))}\n              </tr>\n\n              {Object.keys(armorTypes)\n                .map((x) => parseInt(x))\n                .map((armorType) => (\n                  <tr key={armorType}>\n                    <th scope=\"row\">{armorTypes[armorType]}</th>\n                    {Object.keys(vendorHashes)\n                      .map((x) => parseInt(x))\n                      .map((vendorHash) => (\n                        <td key={vendorHash}>{armorScores[classKey][vendorHash][armorType].normalizedScore}</td>\n                      ))}\n                  </tr>\n                ))}\n            </table>\n          ))}\n      {/* {% for character_key in characters %}        \n        <table>\n          <tr>\n            <th>{{character_key.title()}}</th>\n            {% for vendor_key in vendors %}            \n                <th>{{vendor_key}}</th>            \n            {% endfor %}\n          </tr>\n\n          {% for armor_key in armor %}\n          <tr>\n            <th scope=\"row\">{{armor_key}}</th>\n            {% for vendor_key in vendors %} \n            <td style=\"background-color: {{all_stats[character_key][vendor_key][armor_key][\"color\"] }}\">{{ all_stats[character_key][vendor_key][armor_key][\"score\"] }}</td>\n            {% endfor %}\n          </tr>\n          {% endfor %}\n        </table>\n      {% endfor %} */}\n    </div>\n  );\n}\n\nexport default Vendors;\n","import './app.scss';\nimport Spinner from './components/Spinner/Spinner';\nimport { ReactElement, useState } from 'react';\nimport Nav from './components/Nav/Nav';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from './pages/Login/Login';\nimport Callback from './pages/Callback/Callback';\nimport Home from './pages/Home/Home';\nimport Vendors from './pages/Vendors/Vendors';\n\nfunction App(): ReactElement {\n  const [loading, _] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route exact={true} path=\"/login\" component={Login} />\n        <Route exact={true} path=\"/vendors\" component={Vendors} />\n        <Route exact={true} path=\"/callback\" component={Callback} />\n        <Route exact={true} path=\"/\" component={Home} />\n        <Redirect to=\"/\" />\n      </Switch>\n      {loading && <Spinner text=\"Loading Destiny manifest\" noOverlay={false} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}