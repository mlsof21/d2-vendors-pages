{"version":3,"sources":["components/Spinner/Spinner.tsx","components/Nav/Nav.tsx","storage/Tokens.ts","storage/Storage.ts","helpers.ts","pages/Login/Login.tsx","pages/Callback/Callback.tsx","hooks.ts","bungie-api/destiny2-api.ts","hashes.ts","storage/IndexedDB.ts","storage/Scoring.ts","scoring/scoring.ts","scoring/items.ts","storage/Membership.ts","pages/Vendors/Vendors.tsx","pages/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spinner","props","text","noOverlay","className","rest","classes","classNames","viewBox","transform","r","Nav","Locals","isAuthorized","to","Storage","getStorage","window","localStorage","storage","this","key","getItem","value","setItem","removeItem","keys","forEach","clearItem","TokenStorage","token","set","ALL_TOKENS","JSON","stringify","allTokens","get","parse","clearItems","instance","API_KEY","process","CLIENT_ID","CLIENT_SECRET","bungieApiRoot","getActiveToken","a","getInstance","getAllTokens","clear","hasTokenExpired","accessToken","refreshToken","console","log","getAccessTokenFromRefreshToken","Error","$httpAuthenticated","config","error","headers","authorization","url","params","URLSearchParams","toString","fetch","method","body","then","response","json","$http","res","getAccessTokenFromCode","code","grant_type","client_id","client_secret","handleAccessToken","tokens","setAllTokens","access_token","data","inception","Date","now","expires","expires_in","name","bungieMembershipId","membership_id","refresh_token","refresh_expires_in","Promise","resolve","ok","reject","Login","history","useHistory","onSuccess","push","authorizationUrl","responseType","clientId","redirectUri","onFailure","buttonText","Callback","authCode","useLocation","search","getMembershipInfo","membershipId","getLinkedProfiles","membershipType","getAllMemberships","Response","linkedProfiles","destinyMembershipId","profiles","getProfile","components","profile","characters","getCharactersIds","membershipInfo","hunterId","hunter","titanId","titan","warlockId","warlock","profileCharacters","Object","id","classType","getManifest","getDestinyManifest","getDestinyInventoryItemManifest","manifest","getDestinyManifestSlice","destinyManifest","language","tableNames","manifestSlice","mapCharacterIds","getVendorsForAllCharacters","characterIds","fullResponse","all","map","getVendors","characterId","getVendorsTs","classTypeMap","vendorHashes","statHashes","armorTypes","openDB","upgrade","db","createObjectStore","dbp","val","put","storeManifest","DestinyInventoryItemDefinition","getDestinyInventoryItemDefinitionFromStore","ScoringStorage","scoring","SCORING","ArmorScoring","init","Mobility","Resilience","Recovery","Discipline","Intellect","Strength","assign","sort","b","getScores","armorStats","scoringStorage","storedScoring","getScoring","getDefaultTitanScoring","getTitanScoring","getDefaultHunterScoring","getHunterScoring","getDefaultWarlockScoring","getWarlockScoring","rawScore","score","getRawScore","theoreticalMin","armorScoring","sortedSubGroup1","getSortedSubGroup1","sortedSubGroup2","getSortedSubGroup2","plugs","min","Number","MAX_VALUE","plug","subgroup1Score","subgroup2Score","i","getTheoreticalMin","theoreticalMax","maxStatPossible","minStatPossible","getTheoreticalMax","normalizedScore","Math","round","getNormalizedScore","getColors","gradient","tinygradient","colorHex","rgb","toHexString","normalizedColorHex","getScorableItems","allVendors","classToArmor","classTypes","x","parseInt","d2inventoryItems","availableVendorIds","itemComponents","vendorIds","filter","includes","vendorId","getArmor","ArmorStats","vendors","vendorHash","armor","sales","saleItemsKeys","saleItems","saleItemKey","itemHash","itemSubType","summaryItemHash","isScorable","saleKey","armorType","getArmorScores","scorableItems","stats","getStats","scores","colors","statHash","statHashesMap","MembershipInfoStorage","MEMBERSHIP_INFO","Vendors","useState","loading","setLoading","spinnerText","setSpinnerText","armorScores","setArmorScores","showNormalized","setShowNormalized","classMaxes","setClassMaxes","orderedClassKeys","setOrderedClassKeys","orderedVendorKeys","setOrderedVendorKeys","tokenStorage","membershipInfoStorage","info","inventoryItemManifest","setMembershipInfo","getScorableArmor","scorableArmor","getCharacterMaxes","handleMissingKeys","useEffect","getAllData","maxes","filteredClasses","filteredVendors","type","checked","onChange","classKey","vendorKey","scope","style","backgroundColor","Settings","initialScoring","settings","setSettings","saveButtonText","setSaveButtonText","handleInputChange","e","target","split","stat","characterSetting","onSubmit","preventDefault","setScoring","setTimeout","App","isAuthed","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70b0ad85.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { ReactElement } from 'react';\nimport './spinner.scss';\n\nexport interface SpinnerDisplayProps {\n  text?: string;\n  noOverlay?: boolean;\n  className?: string | string[];\n}\n\nfunction Spinner(props: SpinnerDisplayProps): ReactElement {\n  const { text, noOverlay, className, ...rest } = props;\n\n  const classes = classNames('Spinner', noOverlay && 'Spinner--noOverlay', className);\n\n  return (\n    <div {...rest} className={classes}>\n      <div className=\"Spinner-spinner\">\n        <svg viewBox=\"0 0 64 64\">\n          <circle transform=\"translate(32,32)\" r=\"26\" />\n        </svg>\n      </div>\n      {text ? <div className=\"Spinner-content\">{text}</div> : null}\n    </div>\n  );\n}\n\nexport default Spinner;\n","import { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\nimport './nav.scss';\n\nexport interface NavProps {\n  isAuthorized: boolean;\n}\n\nfunction Nav(props: NavProps): ReactElement {\n  const { isAuthorized } = props;\n\n  return (\n    <div className=\"navbar\">\n      {!isAuthorized && <Link to=\"/login\">Login</Link>}\n      {isAuthorized && <Link to=\"/vendors\">Vendors</Link>}\n      {<Link to=\"/settings\">Settings</Link>}\n    </div>\n  );\n}\n\nexport default Nav;\n","import Storage from './Storage';\n\nenum Locals {\n  ALL_TOKENS = 'all_tokens',\n}\n\nexport interface AccessTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token: string;\n  refresh_expires_in: number;\n  membership_id: string;\n}\n\nexport interface Tokens {\n  accessToken: Token;\n  refreshToken?: Token;\n  bungieMembershipId: string;\n}\n\nexport interface Token {\n  /** The oauth token key */\n  value: string;\n  /** The token expires this many seconds after it is acquired. */\n  expires: number;\n  name: 'access' | 'refresh';\n  /** A UTC epoch milliseconds timestamp representing when the token was acquired. */\n  inception: number;\n}\n\nexport default class TokenStorage extends Storage<Locals> {\n  private static instance?: TokenStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): TokenStorage {\n    if (!this.instance) {\n      this.instance = new TokenStorage();\n    }\n\n    return this.instance;\n  }\n  public setAllTokens(token: Tokens): void {\n    this.set(Locals.ALL_TOKENS, JSON.stringify(token));\n  }\n\n  public getAllTokens(): Tokens | null {\n    const allTokens = this.get(Locals.ALL_TOKENS);\n\n    return allTokens ? JSON.parse(allTokens) : null;\n  }\n\n  public clear(): void {\n    this.clearItems([Locals.ALL_TOKENS]);\n  }\n}\n","interface IStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n  removeItem(key: string): void;\n}\n\nexport default abstract class Storage<T extends string> {\n  private readonly storage: IStorage;\n\n  public constructor(getStorage = (): IStorage => window.localStorage) {\n    this.storage = getStorage();\n  }\n\n  protected get(key: T): string | null {\n    return this.storage.getItem(key);\n  }\n\n  protected set(key: T, value: string): void {\n    this.storage.setItem(key, value);\n  }\n\n  protected clearItem(key: T): void {\n    this.storage.removeItem(key);\n  }\n\n  protected clearItems(keys: T[]): void {\n    keys.forEach((key) => {\n      return this.clearItem(key);\n    });\n  }\n}\n","import { HttpClientConfig } from 'bungie-api-ts/http';\nimport TokenStorage, { Token, Tokens } from './storage/Tokens';\n\nexport const API_KEY = process.env.REACT_APP_BUNGIE_API_KEY || '';\nexport const CLIENT_ID = process.env.REACT_APP_BUNGIE_CLIENT_ID || '';\nexport const CLIENT_SECRET = process.env.REACT_APP_BUNGIE_CLIENT_SECRET || '';\nexport const REDIRECT_URI = process.env.REACT_APP_BUNGIE_REDIRECT_URI || '';\n\nexport const bungieApiRoot = 'https://www.bungie.net/Platform';\n\nexport async function getActiveToken(): Promise<Tokens> {\n  const allTokens = TokenStorage.getInstance().getAllTokens();\n\n  if (!allTokens) {\n    TokenStorage.getInstance().clear();\n  }\n\n  const accessTokenIsValid = allTokens && !hasTokenExpired(allTokens.accessToken);\n  if (accessTokenIsValid) return allTokens;\n\n  const refreshTokenIsValid = allTokens && !hasTokenExpired(allTokens.refreshToken);\n  if (!refreshTokenIsValid) {\n    console.log('We need to fetch a new token here');\n  }\n\n  try {\n    if (allTokens) return await getAccessTokenFromRefreshToken(allTokens.refreshToken!);\n    throw new Error();\n  } catch (e) {\n    throw new Error('I dunno');\n  }\n}\n\nexport async function $httpAuthenticated(config: HttpClientConfig): Promise<Response> {\n  const token = await getActiveToken();\n\n  if (!token) {\n    console.error('We need a new token');\n    throw new Error('Some token error');\n  }\n  const headers = {\n    authorization: `Bearer ${token.accessToken.value}`,\n    'x-api-key': API_KEY,\n  };\n\n  let url = config.url;\n  if (config.params) {\n    // strip out undefined params keys. bungie-api-ts creates them for optional endpoint parameters\n    for (const key in config.params) {\n      typeof config.params[key] === 'undefined' && delete config.params[key];\n    }\n    url = `${url}?${new URLSearchParams(config.params as Record<string, string>).toString()}`;\n  }\n\n  return fetch(url, {\n    method: config.method,\n    body: config.body,\n    headers,\n  }).then((response) => response.json());\n}\n\nexport async function $http(config: HttpClientConfig): Promise<Response> {\n  return fetch(config.url, {\n    method: config.method,\n    body: config.body,\n  }).then((res) => res.json());\n}\n\nexport function getAccessTokenFromCode(code: string): Promise<void> {\n  const body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code,\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n  });\n  return fetch(`${bungieApiRoot}/app/oauth/token/`, { method: 'POST', body })\n    .then((res) => res.json())\n    .then(handleAccessToken)\n    .then((tokens) => TokenStorage.getInstance().setAllTokens(tokens));\n}\n\nfunction handleAccessToken(\n  response:\n    | {\n        access_token: string;\n        expires_in: number;\n        membership_id: string;\n        refresh_token?: string;\n        refresh_expires_in: number;\n      }\n    | undefined,\n): Tokens {\n  if (response?.access_token) {\n    const data = response;\n    const inception = Date.now();\n    const accessToken: Token = {\n      value: data.access_token,\n      expires: data.expires_in,\n      name: 'access',\n      inception,\n    };\n\n    const tokens: Tokens = {\n      accessToken,\n      bungieMembershipId: data.membership_id,\n    };\n\n    if (data.refresh_token) {\n      tokens.refreshToken = {\n        value: data.refresh_token,\n        expires: data.refresh_expires_in,\n        name: 'refresh',\n        inception,\n      };\n    }\n\n    return tokens;\n  } else {\n    throw new Error('No tokens');\n  }\n}\n\nexport function getAccessTokenFromRefreshToken(refreshToken: Token): Promise<Tokens> {\n  const body = new URLSearchParams({\n    grant_type: 'refresh_token',\n    refresh_token: refreshToken.value,\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n  });\n\n  return Promise.resolve(\n    fetch(`${bungieApiRoot}/app/oauth/token/`, {\n      method: 'POST',\n      body,\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    })\n      .then((response) => (response.ok ? response.json() : Promise.reject(response)))\n      .then(handleAccessToken)\n      .then((token) => {\n        TokenStorage.getInstance().setAllTokens(token);\n        return token;\n      }),\n  );\n}\n\nfunction hasTokenExpired(token?: Token): boolean {\n  if (!token) return true;\n\n  const expires = token.expires * 1000 + token.inception;\n  const now = Date.now();\n\n  return now > expires;\n}\n","import { ReactElement } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport OAuth2Login from 'react-simple-oauth2-login';\nimport { CLIENT_ID, getAccessTokenFromCode, REDIRECT_URI } from '../../helpers';\nimport './login.scss';\n\nfunction Login(): ReactElement {\n  const history = useHistory();\n\n  const onSuccess = async (response: any) => {\n    const code = response.code;\n    await getAccessTokenFromCode(code);\n    history.push('/vendors');\n  };\n\n  const onFailure = (response: Response) => console.log(response);\n\n  return (\n    <OAuth2Login\n      authorizationUrl=\"https://www.bungie.net/en/Oauth/Authorize\"\n      responseType=\"code\"\n      clientId={CLIENT_ID}\n      redirectUri={REDIRECT_URI}\n      onSuccess={onSuccess}\n      onFailure={onFailure}\n      buttonText=\"Login with Bungie.net\"\n      className=\"loginButton\"\n    />\n  );\n}\n\nexport default Login;\n","import { ReactElement } from 'react';\nimport { useQuery } from '../../hooks';\n\nfunction Callback(): ReactElement {\n  const query = useQuery();\n\n  const authCode = query.get('code');\n\n  return <>{!authCode && <>{authCode}</>}</>;\n}\n\nexport default Callback;\n","import { useLocation } from 'react-router-dom';\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import {\n  BungieMembershipType,\n  DestinyClass,\n  DestinyComponentType,\n  DestinyManifest,\n  DestinyManifestSlice,\n  DestinyProfileResponse,\n  DestinyVendorsResponse,\n  getDestinyManifest,\n  getDestinyManifestSlice,\n  getLinkedProfiles,\n  getProfile,\n  getVendors as getVendorsTs,\n} from 'bungie-api-ts/destiny2';\nimport { $http, $httpAuthenticated } from '../helpers';\nimport { MembershipInfo } from '../storage/Membership';\n\nexport async function getMembershipInfo(membershipId: string): Promise<MembershipInfo> {\n  const linkedProfiles = await getLinkedProfiles($httpAuthenticated, {\n    membershipId,\n    membershipType: 254,\n    getAllMemberships: true,\n  }).then((response) => response.Response);\n  const destinyMembershipId = linkedProfiles.profiles[0].membershipId;\n  const membershipType = linkedProfiles.profiles[0].membershipType;\n\n  const profile = await getProfile($httpAuthenticated, {\n    destinyMembershipId,\n    components: [200],\n    membershipType,\n  }).then((response) => response.Response);\n\n  const characters = getCharactersIds(profile);\n  const membershipInfo: MembershipInfo = {\n    bungieMembershipId: membershipId,\n    destinyMembershipId,\n    membershipType,\n    hunterId: characters.hunter,\n    titanId: characters.titan,\n    warlockId: characters.warlock,\n  };\n\n  return membershipInfo;\n}\n\nexport interface Characters {\n  hunter: string | null;\n  titan: string | null;\n  warlock: string | null;\n}\n\nfunction getCharactersIds(profile: DestinyProfileResponse): Characters {\n  let hunterId: string | null = null,\n    titanId: string | null = null,\n    warlockId: string | null = null;\n  if (profile.characters.data) {\n    const profileCharacters = profile.characters.data;\n    Object.keys(profile.characters.data).forEach((id) => {\n      switch (profileCharacters[id].classType) {\n        case 0:\n          titanId = id;\n          break;\n        case 1:\n          hunterId = id;\n          break;\n        case 2:\n          warlockId = id;\n          break;\n        default:\n          throw new Error('Unknown class type');\n      }\n    });\n  }\n\n  return {\n    hunter: hunterId,\n    titan: titanId,\n    warlock: warlockId,\n  };\n}\n\nexport async function getManifest(): Promise<DestinyManifest> {\n  const response = await getDestinyManifest($http);\n  return response.Response;\n}\n\nexport async function getDestinyInventoryItemManifest(): Promise<\n  DestinyManifestSlice<['DestinyInventoryItemDefinition', 'DestinyStatDefinition']>\n> {\n  const manifest = await getManifest();\n  const manifestSlice = await getDestinyManifestSlice($http, {\n    destinyManifest: manifest,\n    language: 'en',\n    tableNames: ['DestinyInventoryItemDefinition', 'DestinyStatDefinition'],\n  });\n  return manifestSlice;\n}\n\nexport interface CharacterToId {\n  id: string;\n  classType: DestinyClass;\n}\n\nfunction mapCharacterIds(membershipInfo: MembershipInfo): CharacterToId[] {\n  const hunterId = membershipInfo.hunterId;\n  const titanId = membershipInfo.titanId;\n  const warlockId = membershipInfo.warlockId;\n\n  const value: CharacterToId[] = [];\n\n  if (titanId) value.push({ id: titanId, classType: 0 });\n  if (hunterId) value.push({ id: hunterId, classType: 1 });\n  if (warlockId) value.push({ id: warlockId, classType: 2 });\n  return value;\n}\n\nexport async function getVendorsForAllCharacters(membershipInfo: MembershipInfo) {\n  const characterIds = mapCharacterIds(membershipInfo);\n\n  const fullResponse: { [key: number]: DestinyVendorsResponse } = {};\n  await Promise.all(\n    characterIds.map(async ({ id, classType }) => {\n      const response = await getVendors(id, membershipInfo.destinyMembershipId, membershipInfo.membershipType);\n      fullResponse[classType] = response;\n    }),\n  );\n\n  return fullResponse;\n}\n\nexport async function getVendors(\n  characterId: string,\n  destinyMembershipId: string,\n  membershipType: BungieMembershipType,\n): Promise<DestinyVendorsResponse> {\n  const response = await getVendorsTs($httpAuthenticated, {\n    characterId,\n    components: [304, 402],\n    destinyMembershipId,\n    membershipType,\n  });\n\n  return response.Response;\n}\n","export interface Dictionary<T> {\n  [Key: string]: T;\n}\n\nexport const classHashMap: Dictionary<string> = {\n  '3655393761': 'Titan',\n  '671679327': 'Hunter',\n  '2271682572': 'Warlock',\n};\n\nexport const classTypeMap: Dictionary<string> = {\n  0: 'Titan',\n  1: 'Hunter',\n  2: 'Warlock',\n};\n\nexport const vendorHashes: Dictionary<string> = {\n  350061650: 'Ada-1',\n  396892126: 'Devrim',\n  248695599: 'Drifter',\n  1576276905: 'Failsafe',\n  3603221665: 'Shaxx',\n  2190858386: 'Xur',\n  69482069: 'Zavala',\n};\n\nexport const statHashes: Dictionary<string> = {\n  2996146975: 'Mobility',\n  392767087: 'Resilience',\n  1943323491: 'Recovery',\n  1735777505: 'Discipline',\n  144602215: 'Intellect',\n  4244567218: 'Strength',\n};\n\nexport const armorTypes: Dictionary<string> = {\n  26: 'Helmet',\n  27: 'Gauntlets',\n  28: 'Chest',\n  29: 'Legs',\n};\n","import { DestinyInventoryItemDefinition, DestinyManifestSlice, DestinyStatDefinition } from 'bungie-api-ts/destiny2';\nimport { openDB } from 'idb';\n\n// TODO: make this a class\nasync function get<Type>(key: string): Promise<Type> {\n  const dbp = await openDB('destiny2-store', 1, {\n    upgrade(db) {\n      db.createObjectStore('d2');\n    },\n  });\n  return dbp.get('d2', key);\n}\n\nasync function set(key: string, val: any) {\n  const dbp = await openDB('destiny2-store', 1, {\n    upgrade(db) {\n      db.createObjectStore('d2');\n    },\n  });\n  return dbp.put('d2', val, key);\n}\n\n// async function del(key: string) {\n//   return (await dbp).delete('d2', key);\n// }\n// async function clear() {\n//   return (await dbp).clear('d2');\n// }\n// async function keys() {\n//   return (await dbp).getAllKeys('d2');\n// }\n\nexport async function storeManifest(\n  manifest: DestinyManifestSlice<['DestinyInventoryItemDefinition', 'DestinyStatDefinition']>,\n): Promise<void> {\n  await set('DestinyInventoryItemDefinition', manifest.DestinyInventoryItemDefinition);\n  // await set('DestinyStatDefinition', manifest.DestinyStatDefinition);\n}\n\nexport async function getDestinyStatDefinitionFromStore(): Promise<{ [key: number]: DestinyStatDefinition }> {\n  return await get('DestinyStatDefinition');\n}\n\nexport async function getDestinyInventoryItemDefinitionFromStore(): Promise<{\n  [key: number]: DestinyInventoryItemDefinition;\n}> {\n  return await get('DestinyInventoryItemDefinition');\n}\n","import { ArmorScoring } from '../scoring/scoring';\nimport Storage from './Storage';\n\nenum Locals {\n  SCORING = 'scoring',\n}\n\nexport interface Scoring {\n  [classKey: number]: ArmorScoring;\n}\n\nexport default class ScoringStorage extends Storage<Locals> {\n  private static instance?: ScoringStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): ScoringStorage {\n    if (!this.instance) {\n      this.instance = new ScoringStorage();\n    }\n    return this.instance;\n  }\n\n  public getScoring(): Scoring | undefined {\n    const scoring = this.get(Locals.SCORING);\n    if (scoring) return JSON.parse(scoring);\n\n    return undefined;\n  }\n\n  public setScoring(scoring: string): void {\n    this.set(Locals.SCORING, scoring);\n  }\n}\n","import tinygradient from 'tinygradient';\nimport ScoringStorage from '../storage/Scoring';\nimport { ArmorStats } from './items';\n\nexport class ArmorScoring {\n  public Mobility: number = 0;\n  public Resilience: number = 0;\n  public Recovery: number = 0;\n  public Discipline: number = 0;\n  public Intellect: number = 0;\n  public Strength: number = 0;\n\n  constructor(init?: Partial<ArmorScoring>) {\n    Object.assign(this, init);\n  }\n\n  getSortedSubGroup1(): number[] {\n    return [this.Mobility, this.Resilience, this.Recovery].sort((a, b) => b - a);\n  }\n\n  getSortedSubGroup2(): number[] {\n    return [this.Discipline, this.Intellect, this.Strength].sort((a, b) => b - a);\n  }\n}\n\nexport interface Score {\n  rawScore: number;\n  normalizedScore: number;\n  theoreticalMax: number;\n  theoreticalMin: number;\n}\n\nexport interface Colors {\n  colorHex: string;\n  normalizedColorHex: string;\n}\n\nexport function getScores(armorStats: ArmorStats, classType: number): Score {\n  const scoring = getScoring(classType);\n  const rawScore = getRawScore(armorStats, scoring);\n  const theoreticalMin = getTheoreticalMin(scoring);\n  const theoreticalMax = getTheoreticalMax(scoring);\n  const normalizedScore = getNormalizedScore(rawScore, theoreticalMin, theoreticalMax);\n\n  return { rawScore, normalizedScore, theoreticalMax, theoreticalMin };\n}\n\nexport function getRawScore(armorStats: ArmorStats, scoring: ArmorScoring): number {\n  let score = 0;\n  score += armorStats.Mobility * scoring.Mobility;\n  score += armorStats.Resilience * scoring.Resilience;\n  score += armorStats.Recovery * scoring.Recovery;\n  score += armorStats.Discipline * scoring.Discipline;\n  score += armorStats.Intellect * scoring.Intellect;\n  score += armorStats.Strength * scoring.Strength;\n  return score;\n}\n\nexport function getNormalizedScore(score: number, theoreticalMin: number, theoreticalMax: number): number {\n  return Math.round(((score - theoreticalMin) / (theoreticalMax - theoreticalMin)) * 100);\n}\n\nexport function getColors(score: Score): Colors {\n  const gradient = tinygradient(['#FF0000', '#00FF00']);\n  const colorsRgb = gradient.rgb(score.theoreticalMax > 0 ? score.theoreticalMax : 1);\n  const colorHex = colorsRgb[score.rawScore].toHexString();\n  const colorsRgbNormalized = gradient.rgb(100);\n  const normalizedColorHex = colorsRgbNormalized[score.normalizedScore - 1].toHexString();\n\n  return { colorHex, normalizedColorHex };\n}\n\nfunction getScoring(classType: number): ArmorScoring {\n  const scoringStorage = ScoringStorage.getInstance();\n\n  switch (classType) {\n    case 0:\n      return getTitanScoring(scoringStorage);\n    case 1:\n      return getHunterScoring(scoringStorage);\n    case 2:\n      return getWarlockScoring(scoringStorage);\n  }\n  return new ArmorScoring();\n}\n\nfunction getTitanScoring(scoringStorage: ScoringStorage): ArmorScoring {\n  const storedScoring = scoringStorage.getScoring();\n  if (storedScoring) {\n    return new ArmorScoring(storedScoring[0]);\n  }\n  return getDefaultTitanScoring();\n}\n\nfunction getHunterScoring(scoringStorage: ScoringStorage): ArmorScoring {\n  const storedScoring = scoringStorage.getScoring();\n  if (storedScoring) {\n    return new ArmorScoring(storedScoring[1]);\n  }\n  return getDefaultHunterScoring();\n}\n\nfunction getWarlockScoring(scoringStorage: ScoringStorage): ArmorScoring {\n  const storedScoring = scoringStorage.getScoring();\n  if (storedScoring) {\n    return new ArmorScoring(storedScoring[2]);\n  }\n  return getDefaultWarlockScoring();\n}\n\nexport function getDefaultTitanScoring(): ArmorScoring {\n  return new ArmorScoring({ Recovery: 3, Discipline: 2, Resilience: 1 });\n}\n\nexport function getDefaultHunterScoring(): ArmorScoring {\n  return new ArmorScoring({ Recovery: 3, Discipline: 2, Mobility: 1 });\n}\n\nexport function getDefaultWarlockScoring(): ArmorScoring {\n  return new ArmorScoring({ Recovery: 3, Discipline: 3 });\n}\n\nexport function getTheoreticalMin(armorScoring: ArmorScoring): number {\n  // per subgroup: highest weighting * lowest stat + medium weighting * medium stat + smallest weighting * highest stat\n\n  const sortedSubGroup1 = armorScoring.getSortedSubGroup1();\n  const sortedSubGroup2 = armorScoring.getSortedSubGroup2();\n\n  const plugs = [\n    [2, 10, 10],\n    [2, 2, 20],\n    [2, 6, 16],\n  ];\n\n  let min = Number.MAX_VALUE;\n  for (const plug of plugs) {\n    let subgroup1Score = 0;\n    let subgroup2Score = 0;\n    for (let i = 0; i < 3; i++) {\n      subgroup1Score += sortedSubGroup1[i] * plug[i];\n      subgroup2Score += sortedSubGroup2[i] * plug[i];\n    }\n\n    if (subgroup1Score + subgroup2Score < min) min = subgroup1Score + subgroup2Score;\n  }\n\n  return min;\n}\n\nexport function getTheoreticalMax(armorScoring: ArmorScoring): number {\n  const maxStatPossible = 30;\n  const minStatPossible = 2;\n\n  const sortedSubGroup1 = armorScoring.getSortedSubGroup1();\n  const sortedSubGroup2 = armorScoring.getSortedSubGroup2();\n\n  return (\n    maxStatPossible * (sortedSubGroup1[0] + sortedSubGroup2[0]) +\n    minStatPossible * (sortedSubGroup1[1] + sortedSubGroup1[2] + sortedSubGroup2[1] + sortedSubGroup2[2])\n  );\n}\n","import { DestinyInventoryItemDefinition, DestinyStat, DestinyVendorsResponse } from 'bungie-api-ts/destiny2';\nimport { armorTypes, statHashes as statHashesMap, vendorHashes } from '../hashes';\nimport { getDestinyInventoryItemDefinitionFromStore } from '../storage/IndexedDB';\nimport { Colors, getColors, getScores } from './scoring';\n\nexport async function getScorableItems(allVendors: { [key: number]: DestinyVendorsResponse }): Promise<ScorableItems> {\n  const classToArmor: ScorableItems = {};\n\n  const classTypes = Object.keys(allVendors).map((x) => parseInt(x));\n\n  const d2inventoryItems = await getDestinyInventoryItemDefinitionFromStore();\n\n  for (const classType of classTypes) {\n    classToArmor[classType] = {};\n\n    const availableVendorIds = Object.keys(allVendors[classType].itemComponents).map((x) => parseInt(x));\n    const vendorIds = Object.keys(vendorHashes)\n      .map((x) => parseInt(x))\n      .filter((x) => availableVendorIds.includes(x));\n    for (const vendorId of vendorIds) {\n      classToArmor[classType][vendorId] = await getArmor(allVendors[classType], vendorId, d2inventoryItems);\n    }\n  }\n\n  return classToArmor;\n}\n\nexport interface ScorableItems {\n  [classType: number]: VendorArmor;\n}\n\nexport interface VendorArmor {\n  [vendorHash: number]: SaleArmor;\n}\n\nexport interface SaleArmor {\n  [armorType: number]: {\n    saleKey?: number;\n    itemHash?: number;\n    armorType?: string;\n    stats?: ArmorStats;\n    rawScore?: number;\n    normalizedScore?: number;\n    colors?: Colors;\n    theoreticalMax?: number;\n  };\n}\n\nexport class ArmorStats {\n  public Mobility: number = 0;\n  public Resilience: number = 0;\n  public Recovery: number = 0;\n  public Discipline: number = 0;\n  public Intellect: number = 0;\n  public Strength: number = 0;\n\n  constructor(init?: Partial<ArmorStats>) {\n    Object.assign(this, init);\n  }\n}\n\nasync function getArmor(\n  vendors: DestinyVendorsResponse,\n  vendorHash: number,\n  d2inventoryItems: {\n    [key: number]: DestinyInventoryItemDefinition;\n  },\n): Promise<SaleArmor> {\n  const armor: SaleArmor = {};\n\n  if (vendors.sales.data) {\n    const saleItemsKeys = Object.keys(vendors.sales.data[vendorHash].saleItems).map((x) => parseInt(x));\n    const saleItems = vendors.sales.data[vendorHash].saleItems;\n    for (const saleItemKey of saleItemsKeys) {\n      const itemHash = saleItems[saleItemKey].itemHash;\n      const itemSubType = d2inventoryItems[itemHash].itemSubType;\n      const summaryItemHash = d2inventoryItems[itemHash].summaryItemHash!;\n      if (isScorable(itemSubType) && summaryItemHash !== 715326750) {\n        armor[itemSubType] = { itemHash, saleKey: saleItemKey, armorType: armorTypes[itemSubType] };\n      }\n    }\n  }\n\n  return armor;\n}\n\nfunction isScorable(itemSubType: number): boolean {\n  const armorTypeHashes = Object.keys(armorTypes).map((x) => parseInt(x));\n  return armorTypeHashes.includes(itemSubType);\n}\n\nexport async function getArmorScores(\n  scorableItems: ScorableItems,\n  allVendors: { [key: number]: DestinyVendorsResponse },\n) {\n  for (const classType in scorableItems) {\n    for (const vendorHash in scorableItems[classType])\n      for (const itemSubType in scorableItems[classType][vendorHash]) {\n        if (allVendors[classType].itemComponents[vendorHash].stats.data) {\n          const saleKey = scorableItems[classType][vendorHash][itemSubType].saleKey!;\n          const stats = allVendors[classType].itemComponents[vendorHash].stats.data![saleKey];\n          scorableItems[classType][vendorHash][itemSubType].stats = getStats(stats.stats);\n\n          const scores = getScores(scorableItems[classType][vendorHash][itemSubType].stats!, parseInt(classType));\n          const colors = getColors(scores);\n          scorableItems[classType][vendorHash][itemSubType].rawScore = scores.rawScore;\n          scorableItems[classType][vendorHash][itemSubType].normalizedScore = scores.normalizedScore;\n          scorableItems[classType][vendorHash][itemSubType].colors = colors;\n          scorableItems[classType][vendorHash][itemSubType].theoreticalMax = scores.theoreticalMax;\n        }\n      }\n  }\n  return scorableItems;\n}\n\nfunction getStats(stats: { [key: number]: DestinyStat }): ArmorStats {\n  const armorStats = new ArmorStats();\n\n  for (const statHash in stats) {\n    switch (statHashesMap[statHash]) {\n      case 'Mobility':\n        armorStats.Mobility = stats[statHash].value;\n        break;\n      case 'Resilience':\n        armorStats.Resilience = stats[statHash].value;\n        break;\n      case 'Recovery':\n        armorStats.Recovery = stats[statHash].value;\n        break;\n      case 'Discipline':\n        armorStats.Discipline = stats[statHash].value;\n        break;\n      case 'Intellect':\n        armorStats.Intellect = stats[statHash].value;\n        break;\n      case 'Strength':\n        armorStats.Strength = stats[statHash].value;\n        break;\n      default:\n        throw new Error('No idea what stat this is');\n    }\n  }\n\n  return armorStats;\n}\n","import Storage from './Storage';\n\nenum Locals {\n  MEMBERSHIP_INFO = 'membership_info',\n}\n\nexport interface MembershipInfo {\n  bungieMembershipId: string;\n  hunterId: string | null;\n  titanId: string | null;\n  warlockId: string | null;\n  destinyMembershipId: string;\n  membershipType: number;\n}\n\nexport default class MembershipInfoStorage extends Storage<Locals> {\n  private static instance?: MembershipInfoStorage;\n\n  private constructor() {\n    super();\n  }\n\n  public static getInstance(): MembershipInfoStorage {\n    if (!this.instance) {\n      this.instance = new MembershipInfoStorage();\n    }\n    return this.instance;\n  }\n\n  public getMembershipInfo(): MembershipInfo | undefined {\n    const membershipInfo = this.get(Locals.MEMBERSHIP_INFO);\n    if (membershipInfo) return JSON.parse(membershipInfo);\n\n    return undefined;\n  }\n\n  public setMembershipInfo(membershipInfo: string): void {\n    this.set(Locals.MEMBERSHIP_INFO, membershipInfo);\n  }\n}\n","import { ChangeEvent, ReactElement, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  getDestinyInventoryItemManifest,\n  getMembershipInfo,\n  getVendorsForAllCharacters,\n} from '../../bungie-api/destiny2-api';\nimport Spinner from '../../components/Spinner/Spinner';\nimport { armorTypes, classTypeMap, vendorHashes } from '../../hashes';\nimport { getArmorScores, getScorableItems as getScorableArmor, ScorableItems } from '../../scoring/items';\nimport {\n  getDestinyInventoryItemDefinitionFromStore,\n  getDestinyStatDefinitionFromStore,\n  storeManifest,\n} from '../../storage/IndexedDB';\nimport MembershipInfoStorage from '../../storage/Membership';\nimport TokenStorage from '../../storage/Tokens';\nimport './vendors.scss';\n\nfunction Vendors(): ReactElement {\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(true);\n  const [spinnerText, setSpinnerText] = useState('Loading Destiny manifest');\n  const [armorScores, setArmorScores] = useState<ScorableItems>();\n  const [showNormalized, setShowNormalized] = useState(true);\n  const [classMaxes, setClassMaxes] = useState<{ [key: number]: number }>({ 0: 0, 1: 0, 2: 0 });\n  const [orderedClassKeys, setOrderedClassKeys] = useState([1, 0, 2]);\n  const [orderedVendorKeys, setOrderedVendorKeys] = useState([\n    350061650, 396892126, 248695599, 1576276905, 3603221665, 2190858386, 69482069,\n  ]);\n\n  const tokenStorage = TokenStorage.getInstance();\n  const membershipInfoStorage = MembershipInfoStorage.getInstance();\n\n  const tokens = tokenStorage.getAllTokens();\n  let membershipId = '';\n\n  if (!tokens) {\n    console.info('Redirecting to Login');\n    history.push('/Login');\n    return <></>;\n  }\n  if (tokens) membershipId = tokens?.bungieMembershipId;\n\n  let membershipInfo = MembershipInfoStorage.getInstance().getMembershipInfo();\n\n  useEffect(() => {\n    getAllData();\n    // setLoading(false);\n  }, []);\n\n  async function getAllData() {\n    // const d2StatDef = await getDestinyStatDefinitionFromStore();\n    const d2invItemDef = await getDestinyInventoryItemDefinitionFromStore();\n    if (!d2invItemDef) {\n      const inventoryItemManifest = await getDestinyInventoryItemManifest();\n      setSpinnerText('Storing manifest');\n      await storeManifest(inventoryItemManifest);\n    }\n\n    if (!membershipInfo) {\n      setSpinnerText('Fetching Bungie Member Info');\n      membershipInfo = await getMembershipInfo(membershipId);\n      membershipInfoStorage.setMembershipInfo(JSON.stringify(membershipInfo));\n    }\n\n    if (membershipInfo) {\n      setSpinnerText('Fetching Vendor Inventories');\n      const allVendors = await getVendorsForAllCharacters(membershipInfo);\n\n      setSpinnerText('Getting scorable armor');\n      const scorableArmor = await getScorableArmor(allVendors);\n\n      setSpinnerText('Scoring armor');\n      const scores = await getArmorScores(scorableArmor, allVendors);\n      getCharacterMaxes(scores);\n      handleMissingKeys(scores);\n\n      setArmorScores(scores);\n    }\n    setLoading(false);\n  }\n\n  const handleCheckedChange = () => setShowNormalized(!showNormalized);\n\n  const getCharacterMaxes = (scores: ScorableItems) => {\n    const vendorHash = parseInt(Object.keys(scores[0])[0]);\n    const armorHash = 26;\n    const maxes: { [key: number]: number } = {};\n    for (let i = 0; i < 3; i++) {\n      if (i in scores) {\n        if (scores[i][vendorHash][armorHash].theoreticalMax) {\n          maxes[i] = scores[i][vendorHash][armorHash].theoreticalMax!;\n        }\n      }\n    }\n\n    setClassMaxes(maxes);\n  };\n\n  const handleMissingKeys = (scores: ScorableItems) => {\n    const classes = Object.keys(scores).map((x) => parseInt(x));\n    const filteredClasses = orderedClassKeys.filter((x) => classes.includes(x));\n    setOrderedClassKeys([...filteredClasses]);\n    const vendors = Object.keys(scores[filteredClasses[0]]).map((x) => parseInt(x));\n    const filteredVendors = orderedVendorKeys.filter((x) => vendors.includes(x));\n    setOrderedVendorKeys([...filteredVendors]);\n  };\n\n  return (\n    <div>\n      {!loading && (\n        <label>\n          Show Normalized Scores (0-100)\n          <input type=\"checkbox\" checked={showNormalized} onChange={handleCheckedChange} />\n        </label>\n      )}\n      {loading && <Spinner text={spinnerText} noOverlay={true} />}\n      <div className=\"vendorTable\">\n        {armorScores &&\n          orderedClassKeys.map((classKey) => (\n            <table className=\"table--flip\" key={classKey}>\n              <tbody>\n                <tr>\n                  <th>\n                    {classTypeMap[classKey]} {!showNormalized && `(${classMaxes[classKey]})`}\n                  </th>\n                  {orderedVendorKeys.map((vendorKey) => (\n                    <th key={vendorKey}>{vendorHashes[vendorKey]}</th>\n                  ))}\n                </tr>\n\n                {Object.keys(armorTypes)\n                  .map((x) => parseInt(x))\n                  .map((armorType) => (\n                    <tr key={armorType}>\n                      <th scope=\"row\">{armorTypes[armorType]}</th>\n                      {orderedVendorKeys.map((vendorHash) => {\n                        return (\n                          <td\n                            key={vendorHash}\n                            className=\"scoreCell\"\n                            style={{\n                              backgroundColor: showNormalized\n                                ? armorScores[classKey][vendorHash][armorType].colors?.normalizedColorHex\n                                : armorScores[classKey][vendorHash][armorType].colors?.colorHex,\n                            }}\n                          >\n                            {showNormalized\n                              ? armorScores[classKey][vendorHash][armorType].normalizedScore\n                              : armorScores[classKey][vendorHash][armorType].rawScore}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Vendors;\n","import React, { ReactElement, useState } from 'react';\nimport { classTypeMap } from '../../hashes';\nimport {\n  ArmorScoring,\n  getDefaultHunterScoring,\n  getDefaultTitanScoring,\n  getDefaultWarlockScoring,\n} from '../../scoring/scoring';\nimport ScoringStorage from '../../storage/Scoring';\nimport './settings.scss';\n\nfunction Settings(): ReactElement {\n  const scoringStorage = ScoringStorage.getInstance();\n  const storedScoring = scoringStorage.getScoring();\n  const initialScoring = storedScoring\n    ? {\n        0: new ArmorScoring(storedScoring[0]),\n        1: new ArmorScoring(storedScoring[1]),\n        2: new ArmorScoring(storedScoring[2]),\n      }\n    : {\n        0: getDefaultTitanScoring(),\n        1: getDefaultHunterScoring(),\n        2: getDefaultWarlockScoring(),\n      };\n\n  const [settings, setSettings] = useState<{ [key: number]: ArmorScoring }>(initialScoring);\n  const [saveButtonText, setSaveButtonText] = useState('Save Changes');\n\n  const classes = Object.keys(classTypeMap);\n\n  function handleSubmit(e: React.SyntheticEvent) {\n    e.preventDefault();\n\n    scoringStorage.setScoring(JSON.stringify(settings));\n\n    setSaveButtonText('Saved!');\n    setTimeout(() => setSaveButtonText('Save Changes'), 2000);\n  }\n\n  function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const { name, value } = e.target;\n    const [classType, stat] = name.split('-');\n\n    const characterSetting = settings[parseInt(classType)];\n    if (stat === 'Mobility') characterSetting.Mobility = parseInt(value);\n    if (stat === 'Resilience') characterSetting.Resilience = parseInt(value);\n    if (stat === 'Recovery') characterSetting.Recovery = parseInt(value);\n    if (stat === 'Discipline') characterSetting.Discipline = parseInt(value);\n    if (stat === 'Intellect') characterSetting.Intellect = parseInt(value);\n    if (stat === 'Strength') characterSetting.Strength = parseInt(value);\n\n    setSettings({ ...settings, [parseInt(classType)]: characterSetting });\n    console.log(`changing ${name} to ${value}`);\n  }\n\n  return (\n    <>\n      <h2>Scoring Settings</h2>\n      <p>\n        Configure your own scoring here. This will affect the scores you see on the main page. For example, if you only\n        value <code>Recovery</code> on armor, you would set the <code>Recovery</code> field for your classes below to a\n        number. The score you would see for vendor armor would be: (<code>Recovery * number</code>)\n      </p>\n      <form onSubmit={handleSubmit}>\n        <div className=\"settings\">\n          {classes.map((classType) => (\n            <div className=\"characterSettings\" key={classType}>\n              <h3>{classTypeMap[classType]}</h3>\n              <label>\n                Mobility:{' '}\n                <input\n                  type=\"number\"\n                  name={`${classType}-Mobility`}\n                  onChange={handleInputChange}\n                  value={settings[parseInt(classType)].Mobility}\n                  className=\"statInput\"\n                  min=\"0\"\n                />{' '}\n              </label>\n              <label>\n                Resilience:{' '}\n                <input\n                  type=\"number\"\n                  name={`${classType}-Resilience`}\n                  onChange={handleInputChange}\n                  value={settings[parseInt(classType)].Resilience}\n                  className=\"statInput\"\n                  min=\"0\"\n                />{' '}\n              </label>\n              <label>\n                Recovery:{' '}\n                <input\n                  type=\"number\"\n                  name={`${classType}-Recovery`}\n                  onChange={handleInputChange}\n                  value={settings[parseInt(classType)].Recovery}\n                  className=\"statInput\"\n                  min=\"0\"\n                />{' '}\n              </label>\n              <label>\n                Discipline:{' '}\n                <input\n                  type=\"number\"\n                  name={`${classType}-Discipline`}\n                  onChange={handleInputChange}\n                  value={settings[parseInt(classType)].Discipline}\n                  className=\"statInput\"\n                  min=\"0\"\n                />{' '}\n              </label>\n              <label>\n                Intellect:{' '}\n                <input\n                  type=\"number\"\n                  name={`${classType}-Intellect`}\n                  onChange={handleInputChange}\n                  value={settings[parseInt(classType)].Intellect}\n                  className=\"statInput\"\n                  min=\"0\"\n                />{' '}\n              </label>\n              <label>\n                Strength:{' '}\n                <input\n                  type=\"number\"\n                  name={`${classType}-Strength`}\n                  onChange={handleInputChange}\n                  value={settings[parseInt(classType)].Strength}\n                  className=\"statInput\"\n                  min=\"0\"\n                />{' '}\n              </label>\n            </div>\n          ))}\n        </div>\n        <input type=\"submit\" value={saveButtonText} onChange={handleInputChange} />\n      </form>\n    </>\n  );\n}\n\nexport default Settings;\n","import './app.scss';\nimport Spinner from './components/Spinner/Spinner';\nimport { ReactElement, useState } from 'react';\nimport Nav from './components/Nav/Nav';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from './pages/Login/Login';\nimport Callback from './pages/Callback/Callback';\nimport Vendors from './pages/Vendors/Vendors';\nimport Settings from './pages/Settings/Settings';\nimport TokenStorage from './storage/Tokens';\n\nfunction App(): ReactElement {\n  const [loading, _] = useState(false);\n\n  const tokenStorage = TokenStorage.getInstance();\n  // const membershipInfoStorage = MembershipInfoStorage.getInstance();\n\n  const tokens = tokenStorage.getAllTokens();\n  const isAuthed = tokens ? true : false;\n\n  return (\n    <div className=\"App\">\n      <Nav isAuthorized={isAuthed} />\n      <Switch>\n        <Route exact={true} path=\"/login\" component={Login} />\n        <Route exact={true} path=\"/vendors\" component={Vendors} />\n        <Route exact={true} path=\"/\" component={Vendors} />\n        <Route exact={true} path=\"/callback\" component={Callback} />\n        <Route exact={true} path=\"/settings\" component={Settings} />\n        <Redirect to=\"/\" />\n      </Switch>\n      {loading && <Spinner text=\"Loading Destiny manifest\" noOverlay={false} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}